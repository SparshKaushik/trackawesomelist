{
  "version": "https://jsonfeed.org/version/1",
  "icon": "https://www.trackawesomelist.com/icon.png",
  "favicon": "https://www.trackawesomelist.com/favicon.ico",
  "language": "en",
  "title": "Awesome List Updates on Jan 16, 2025",
  "_site_title": "Track Awesome List",
  "description": "10 awesome lists updated today.",
  "_seo_title": "Awesome List Updates on Jan 16, 2025 - Track Awesome List",
  "feed_url": "https://www.trackawesomelist.com/feed.json",
  "home_page_url": "https://www.trackawesomelist.com",
  "items": [
    {
      "id": "https://www.trackawesomelist.com/awesome-selfhosted/awesome-selfhosted/",
      "title": "Awesome Selfhosted",
      "_slug": "awesome-selfhosted/awesome-selfhosted/",
      "_filepath": "/content/awesome-selfhosted/awesome-selfhosted/README.md",
      "url": "https://www.trackawesomelist.com/awesome-selfhosted/awesome-selfhosted/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Software / Wikis\n\n*   [XWiki](https://www.xwiki.org) - Second generation wiki that allows the user to extend its functionalities with a powerful extension-based architecture. ([Demo](https://www.xwikiplayground.org/xwiki/bin/view/Main/), [Source Code (⭐1.1k)](https://github.com/xwiki/xwiki-platform)) `LGPL-2.1` `Java/Docker/deb`",
      "content_html": "<h3><p>Software / Wikis</p>\n</h3><ul>\n<li><a href=\"https://www.xwiki.org\" rel=\"noopener noreferrer\">XWiki</a> - Second generation wiki that allows the user to extend its functionalities with a powerful extension-based architecture. (<a href=\"https://www.xwikiplayground.org/xwiki/bin/view/Main/\" rel=\"noopener noreferrer\">Demo</a>, <a href=\"https://github.com/xwiki/xwiki-platform\" rel=\"noopener noreferrer\">Source Code (⭐1.1k)</a>) <code>LGPL-2.1</code> <code>Java/Docker/deb</code></li>\n</ul>\n",
      "date_published": "2025-01-16T17:57:30.000Z",
      "date_modified": "2025-01-16T17:57:30.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/ripienaar/free-for-dev/",
      "title": "Free for Dev",
      "_slug": "ripienaar/free-for-dev/",
      "_filepath": "/content/ripienaar/free-for-dev/README.md",
      "url": "https://www.trackawesomelist.com/ripienaar/free-for-dev/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### CI and CD\n\n*   [Terrateam](https://terrateam.io) - GitOps-first Terraform automation with pull request-driven workflows, project isolation via self-hosted runners, and layered runs for ordered operations. Free for up to 3 users.",
      "content_html": "<h3><p>CI and CD</p>\n</h3><ul>\n<li><a href=\"https://terrateam.io\" rel=\"noopener noreferrer\">Terrateam</a> - GitOps-first Terraform automation with pull request-driven workflows, project isolation via self-hosted runners, and layered runs for ordered operations. Free for up to 3 users.</li>\n</ul>\n",
      "date_published": "2025-01-16T15:36:54.000Z",
      "date_modified": "2025-01-16T15:36:54.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/unixorn/awesome-zsh-plugins/",
      "title": "Awesome Zsh Plugins",
      "_slug": "unixorn/awesome-zsh-plugins/",
      "_filepath": "/content/unixorn/awesome-zsh-plugins/README.md",
      "url": "https://www.trackawesomelist.com/unixorn/awesome-zsh-plugins/",
      "summary": "3 awesome projects updated",
      "content_text": "\n\n### Plugins / [superconsole](https://github.com/alexchmykhalo/superconsole) - Windows-only\n\n*   [scad (⭐3)](https://github.com/MicahElliott/scad) - Shell Colorized Aliases for Docker/Podman (SCAD). Defines [docker](https://www.docker.com/) / [podman](https://podman.io) aliases and functions. These aliases adhere to the newer style of organizing and invoking `docker` with management commands rather than the notoriously confusing “random solo commands”. Requires [GRC (⭐2k)](https://github.com/garabik/grc) and [jq (⭐32k)](https://github.com/jqlang/jq).\n*   [xxh (ninagrosse) (⭐0)](https://github.com/ninagrosse/xxh-plugin-zsh-ohmyzsh) - Plugin for [xxh (⭐5.7k)](https://github.com/xxh/xxh) that requires [xxh-plugin-prerun-cli-tools (⭐0)](https://github.com/ninagrosse/xxh-plugin-prerun-cli-tools).\n*   [xxh (roman-geraskin) (⭐5)](https://github.com/roman-geraskin/xxh-plugin-zsh-zshrc) - plugin for [xxh-shell-zsh (⭐39)](https://github.com/xxh/xxh-shell-zsh) that copies your `~/.zshrc` to a remote host and sources it with [xxh-shell-zsh (⭐39)](https://github.com/xxh/xxh-shell-zsh).\n*   [zpy (⭐91)](https://github.com/AndydeCleyre/zpy) - Manage Python environments, dependencies, and isolated app installations, with a ZSH frontend for [uv (⭐61k)](https://github.com/astral-sh/uv) or [pip-tools (⭐7.9k)](https://github.com/jazzband/pip-tools).\n\n### Completions / [superconsole](https://github.com/alexchmykhalo/superconsole) - Windows-only\n\n*   [more-completions (⭐46)](https://github.com/MenkeTechnologies/zsh-more-completions) - 13500 ZSH compsys completions! Most were generated by python scripts that parsed --help output and man page output. As such they are of varying quality. Architecture prefixed completions are in the `architecture_src` directory.\n\n### ZSH Tools / [superconsole](https://github.com/alexchmykhalo/superconsole) - Windows-only\n\n*   [completion-generators (⭐1)](https://github.com/zetlen/zsh-completion-generators) - Has a table of tool names and the commands for outputting completion scripts for those tools. On every load, will check that table and run the completion command for every tool found in your `$PATH` and save its output to a file \\_<toolname>. If the path of this repo is in `$fpath`, completions will work immediately.",
      "content_html": "<h3><p>Plugins / <a href=\"https://github.com/alexchmykhalo/superconsole\" rel=\"noopener noreferrer\">superconsole</a> - Windows-only</p>\n</h3><ul>\n<li><a href=\"https://github.com/MicahElliott/scad\" rel=\"noopener noreferrer\">scad (⭐3)</a> - Shell Colorized Aliases for Docker/Podman (SCAD). Defines <a href=\"https://www.docker.com/\" rel=\"noopener noreferrer\">docker</a> / <a href=\"https://podman.io\" rel=\"noopener noreferrer\">podman</a> aliases and functions. These aliases adhere to the newer style of organizing and invoking <code>docker</code> with management commands rather than the notoriously confusing “random solo commands”. Requires <a href=\"https://github.com/garabik/grc\" rel=\"noopener noreferrer\">GRC (⭐2k)</a> and <a href=\"https://github.com/jqlang/jq\" rel=\"noopener noreferrer\">jq (⭐32k)</a>.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/ninagrosse/xxh-plugin-zsh-ohmyzsh\" rel=\"noopener noreferrer\">xxh (ninagrosse) (⭐0)</a> - Plugin for <a href=\"https://github.com/xxh/xxh\" rel=\"noopener noreferrer\">xxh (⭐5.7k)</a> that requires <a href=\"https://github.com/ninagrosse/xxh-plugin-prerun-cli-tools\" rel=\"noopener noreferrer\">xxh-plugin-prerun-cli-tools (⭐0)</a>.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/roman-geraskin/xxh-plugin-zsh-zshrc\" rel=\"noopener noreferrer\">xxh (roman-geraskin) (⭐5)</a> - plugin for <a href=\"https://github.com/xxh/xxh-shell-zsh\" rel=\"noopener noreferrer\">xxh-shell-zsh (⭐39)</a> that copies your <code>~/.zshrc</code> to a remote host and sources it with <a href=\"https://github.com/xxh/xxh-shell-zsh\" rel=\"noopener noreferrer\">xxh-shell-zsh (⭐39)</a>.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/AndydeCleyre/zpy\" rel=\"noopener noreferrer\">zpy (⭐91)</a> - Manage Python environments, dependencies, and isolated app installations, with a ZSH frontend for <a href=\"https://github.com/astral-sh/uv\" rel=\"noopener noreferrer\">uv (⭐61k)</a> or <a href=\"https://github.com/jazzband/pip-tools\" rel=\"noopener noreferrer\">pip-tools (⭐7.9k)</a>.</li>\n</ul>\n<h3><p>Completions / <a href=\"https://github.com/alexchmykhalo/superconsole\" rel=\"noopener noreferrer\">superconsole</a> - Windows-only</p>\n</h3><ul>\n<li><a href=\"https://github.com/MenkeTechnologies/zsh-more-completions\" rel=\"noopener noreferrer\">more-completions (⭐46)</a> - 13500 ZSH compsys completions! Most were generated by python scripts that parsed --help output and man page output. As such they are of varying quality. Architecture prefixed completions are in the <code>architecture_src</code> directory.</li>\n</ul>\n<h3><p>ZSH Tools / <a href=\"https://github.com/alexchmykhalo/superconsole\" rel=\"noopener noreferrer\">superconsole</a> - Windows-only</p>\n</h3><ul>\n<li><a href=\"https://github.com/zetlen/zsh-completion-generators\" rel=\"noopener noreferrer\">completion-generators (⭐1)</a> - Has a table of tool names and the commands for outputting completion scripts for those tools. On every load, will check that table and run the completion command for every tool found in your <code>$PATH</code> and save its output to a file _. If the path of this repo is in <code>$fpath</code>, completions will work immediately.</li>\n</ul>\n",
      "date_published": "2025-01-16T15:17:23.000Z",
      "date_modified": "2025-01-16T15:35:03.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/fffaraz/awesome-cpp/",
      "title": "Awesome Cpp",
      "_slug": "fffaraz/awesome-cpp/",
      "_filepath": "/content/fffaraz/awesome-cpp/README.md",
      "url": "https://www.trackawesomelist.com/fffaraz/awesome-cpp/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Scripting\n\n*   [nanobind (⭐2.9k)](https://github.com/wjakob/nanobind) - tiny and efficient C++/Python bindings. \\[BSD-3-Clause]",
      "content_html": "<h3><p>Scripting</p>\n</h3><ul>\n<li><a href=\"https://github.com/wjakob/nanobind\" rel=\"noopener noreferrer\">nanobind (⭐2.9k)</a> - tiny and efficient C++/Python bindings. [BSD-3-Clause]</li>\n</ul>\n",
      "date_published": "2025-01-16T14:09:39.000Z",
      "date_modified": "2025-01-16T14:09:39.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/AchoArnold/discount-for-student-dev/",
      "title": "Discount for Student Dev",
      "_slug": "AchoArnold/discount-for-student-dev/",
      "_filepath": "/content/AchoArnold/discount-for-student-dev/README.md",
      "url": "https://www.trackawesomelist.com/AchoArnold/discount-for-student-dev/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### 3D Animation and Modeling Software\n\n*   [Solid Edge](https://resources.sw.siemens.com/en-US/download-solid-edge-student-edition/) \\[FREE] - Free professional 3D CAD software for students.",
      "content_html": "<h3><p>3D Animation and Modeling Software</p>\n</h3><ul>\n<li><a href=\"https://resources.sw.siemens.com/en-US/download-solid-edge-student-edition/\" rel=\"noopener noreferrer\">Solid Edge</a> [FREE] - Free professional 3D CAD software for students.</li>\n</ul>\n",
      "date_published": "2025-01-16T14:02:44.000Z",
      "date_modified": "2025-01-16T14:02:44.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/vitejs/awesome-vite/",
      "title": "Awesome Vite",
      "_slug": "vitejs/awesome-vite/",
      "_filepath": "/content/vitejs/awesome-vite/README.md",
      "url": "https://www.trackawesomelist.com/vitejs/awesome-vite/",
      "summary": "2 awesome projects updated",
      "content_text": "\n\n### Templates / React\n\n*   [vite-plugin-ssr-config (⭐1)](https://github.com/yracnet/vite-plugin-ssr-config) - Configure server-side rendering (SSR) with `React`, `React-Query`, `React-Router`.\n\n### Framework-agnostic Plugins / Bundling\n\n*   [vite-plugin-builder (⭐2)](https://github.com/yracnet/vite-plugin-builder) - Enable dual compilation for Server-Side Rendering (SSR) and Client-Side Rendering (CSR).",
      "content_html": "<h3><p>Templates / React</p>\n</h3><ul>\n<li><a href=\"https://github.com/yracnet/vite-plugin-ssr-config\" rel=\"noopener noreferrer\">vite-plugin-ssr-config (⭐1)</a> - Configure server-side rendering (SSR) with <code>React</code>, <code>React-Query</code>, <code>React-Router</code>.</li>\n</ul>\n<h3><p>Framework-agnostic Plugins / Bundling</p>\n</h3><ul>\n<li><a href=\"https://github.com/yracnet/vite-plugin-builder\" rel=\"noopener noreferrer\">vite-plugin-builder (⭐2)</a> - Enable dual compilation for Server-Side Rendering (SSR) and Client-Side Rendering (CSR).</li>\n</ul>\n",
      "date_published": "2025-01-16T13:28:06.000Z",
      "date_modified": "2025-01-16T13:31:50.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/jaywcjlove/awesome-mac/",
      "title": "Awesome Mac",
      "_slug": "jaywcjlove/awesome-mac/",
      "_filepath": "/content/jaywcjlove/awesome-mac/README.md",
      "url": "https://www.trackawesomelist.com/jaywcjlove/awesome-mac/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Utilities / Menu Bar Tools\n\n*   [NotchNook](https://lo.cafe/notchnook) - Customizes your Mac's menu bar to seamlessly integrate with the notch design.",
      "content_html": "<h3><p>Utilities / Menu Bar Tools</p>\n</h3><ul>\n<li><a href=\"https://lo.cafe/notchnook\" rel=\"noopener noreferrer\">NotchNook</a> - Customizes your Mac's menu bar to seamlessly integrate with the notch design.</li>\n</ul>\n",
      "date_published": "2025-01-16T04:12:48.000Z",
      "date_modified": "2025-01-16T04:12:48.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/rockerBOO/awesome-neovim/",
      "title": "Awesome Neovim",
      "_slug": "rockerBOO/awesome-neovim/",
      "_filepath": "/content/rockerBOO/awesome-neovim/README.md",
      "url": "https://www.trackawesomelist.com/rockerBOO/awesome-neovim/",
      "summary": "2 awesome projects updated",
      "content_text": "\n\n### Search / Diagnostics\n\n*   [wurli/visimatch.nvim (⭐60)](https://github.com/wurli/visimatch.nvim) - Adds highlights to any text matching the current selection in visual mode.\n\n### Editing Support / Diagnostics\n\n*   [wurli/split.nvim (⭐30)](https://github.com/wurli/split.nvim) - Provides a mapping to split text by delimiter, giving an inverse of the native J command.",
      "content_html": "<h3><p>Search / Diagnostics</p>\n</h3><ul>\n<li><a href=\"https://github.com/wurli/visimatch.nvim\" rel=\"noopener noreferrer\">wurli/visimatch.nvim (⭐60)</a> - Adds highlights to any text matching the current selection in visual mode.</li>\n</ul>\n<h3><p>Editing Support / Diagnostics</p>\n</h3><ul>\n<li><a href=\"https://github.com/wurli/split.nvim\" rel=\"noopener noreferrer\">wurli/split.nvim (⭐30)</a> - Provides a mapping to split text by delimiter, giving an inverse of the native J command.</li>\n</ul>\n",
      "date_published": "2025-01-16T04:12:22.000Z",
      "date_modified": "2025-01-16T04:12:56.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/PatrickJS/awesome-angular/",
      "title": "Awesome Angular",
      "_slug": "PatrickJS/awesome-angular/",
      "_filepath": "/content/PatrickJS/awesome-angular/README.md",
      "url": "https://www.trackawesomelist.com/PatrickJS/awesome-angular/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Analytics / [Google Developer Experts](https://developers.google.com/experts/all/technology/web-technologies)\n\n*   [ngx-segment-analytics (⭐21)](https://github.com/opendecide/ngx-segment-analytics) - Provides an API for [Segment (⭐444)](https://github.com/segmentio/analytics-next/).",
      "content_html": "<h3><p>Analytics / <a href=\"https://developers.google.com/experts/all/technology/web-technologies\" rel=\"noopener noreferrer\">Google Developer Experts</a></p>\n</h3><ul>\n<li><a href=\"https://github.com/opendecide/ngx-segment-analytics\" rel=\"noopener noreferrer\">ngx-segment-analytics (⭐21)</a> - Provides an API for <a href=\"https://github.com/segmentio/analytics-next/\" rel=\"noopener noreferrer\">Segment (⭐444)</a>.</li>\n</ul>\n",
      "date_published": "2025-01-16T03:33:20.000Z",
      "date_modified": "2025-01-16T03:33:20.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/YuzheSHI/awesome-agi-cocosci/",
      "title": "Awesome Agi Cocosci",
      "_slug": "YuzheSHI/awesome-agi-cocosci/",
      "_filepath": "/content/YuzheSHI/awesome-agi-cocosci/README.md",
      "url": "https://www.trackawesomelist.com/YuzheSHI/awesome-agi-cocosci/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Bayesian Modeling / Bayesian Induction\n\n*   [Human-level concept learning through probabilistic program induction](https://www.science.org/doi/full/10.1126/science.aab3050) - ***Science***, 2015. \\[[All Versions](https://scholar.google.com/scholar?cluster=11844685101409624506)]. \\[[Preprint](https://ai6034.mit.edu/wiki/images/LakeDec2015.pdf)]. \\[[Supplementary Material](https://cims.nyu.edu/~brenden/LakeEtAl2015Science_supp.pdf)]. People learning new concepts can often generalize successfully from just a single example, yet machine learning algorithms typically require tens or hundreds of examples to perform with similar accuracy. People can also use learned concepts in richer ways than conventional algorithms—for action, imagination, and explanation. This work presents a computational model that captures these human learning abilities for a large class of simple visual concepts: handwritten characters from the world’s alphabets. The model represents concepts as simple programs that best explain observed examples under a Bayesian criterion. On a challenging one-shot classification task, the model achieves human-level performance while outperforming recent deep learning approaches.",
      "content_html": "<h3><p>Bayesian Modeling / Bayesian Induction</p>\n</h3><ul>\n<li><a href=\"https://www.science.org/doi/full/10.1126/science.aab3050\" rel=\"noopener noreferrer\">Human-level concept learning through probabilistic program induction</a> - <em><strong>Science</strong></em>, 2015. [<a href=\"https://scholar.google.com/scholar?cluster=11844685101409624506\" rel=\"noopener noreferrer\">All Versions</a>]. [<a href=\"https://ai6034.mit.edu/wiki/images/LakeDec2015.pdf\" rel=\"noopener noreferrer\">Preprint</a>]. [<a href=\"https://cims.nyu.edu/~brenden/LakeEtAl2015Science_supp.pdf\" rel=\"noopener noreferrer\">Supplementary Material</a>]. People learning new concepts can often generalize successfully from just a single example, yet machine learning algorithms typically require tens or hundreds of examples to perform with similar accuracy. People can also use learned concepts in richer ways than conventional algorithms—for action, imagination, and explanation. This work presents a computational model that captures these human learning abilities for a large class of simple visual concepts: handwritten characters from the world’s alphabets. The model represents concepts as simple programs that best explain observed examples under a Bayesian criterion. On a challenging one-shot classification task, the model achieves human-level performance while outperforming recent deep learning approaches.</li>\n</ul>\n",
      "date_published": "2025-01-16T00:16:24.000Z",
      "date_modified": "2025-01-16T00:16:24.000Z"
    }
  ]
}
