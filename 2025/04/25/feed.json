{
  "version": "https://jsonfeed.org/version/1",
  "icon": "https://www.trackawesomelist.com/icon.png",
  "favicon": "https://www.trackawesomelist.com/favicon.ico",
  "language": "en",
  "title": "Awesome List Updates on Apr 25, 2025",
  "_site_title": "Track Awesome List",
  "description": "6 awesome lists updated today.",
  "_seo_title": "Awesome List Updates on Apr 25, 2025 - Track Awesome List",
  "feed_url": "https://www.trackawesomelist.com/feed.json",
  "home_page_url": "https://www.trackawesomelist.com",
  "items": [
    {
      "id": "https://www.trackawesomelist.com/CodyReichert/awesome-cl/",
      "title": "Awesome Cl",
      "_slug": "CodyReichert/awesome-cl/",
      "_filepath": "/content/CodyReichert/awesome-cl/README.md",
      "url": "https://www.trackawesomelist.com/CodyReichert/awesome-cl/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Package declarations / Third-party APIs\n\n*   [cl-reexport (‚≠ê12)](https://github.com/takagi/cl-reexport) - when you want to import and re-export many symbols at once and `:include` or `:exclude` some.",
      "content_html": "<h3><p>Package declarations / Third-party APIs</p>\n</h3><ul>\n<li><a href=\"https://github.com/takagi/cl-reexport\" rel=\"noopener noreferrer\">cl-reexport (‚≠ê12)</a> - when you want to import and re-export many symbols at once and <code>:include</code> or <code>:exclude</code> some.</li>\n</ul>\n",
      "date_published": "2025-04-25T10:40:01.000Z",
      "date_modified": "2025-04-25T10:40:01.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/sindresorhus/quick-look-plugins/",
      "title": "Quick Look Plugins",
      "_slug": "sindresorhus/quick-look-plugins/",
      "_filepath": "/content/sindresorhus/quick-look-plugins/README.md",
      "url": "https://www.trackawesomelist.com/sindresorhus/quick-look-plugins/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### More\n\n### [Folder Preview](https://anybox.ltd/folder-preview) üí∞\n\n> Preview folders and ZIP files with the familiar experience of Finder.\n\nPurchase on the [App Store](https://apps.apple.com/app/folder-preview/id6698876601).\n\n[![](https://github.com/sindresorhus/quick-look-plugins/raw/main/screenshots/FolderPreview.png)](https://anybox.ltd/folder-preview)",
      "content_html": "<h3><p>More</p>\n</h3><h3 id=\"folder-preview-üí∞\"><a class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#folder-preview-üí∞\"><svg class=\"octicon octicon-link\" viewbox=\"0 0 16 16\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a><a href=\"https://anybox.ltd/folder-preview\" rel=\"noopener noreferrer\">Folder Preview</a> üí∞</h3><blockquote>\n<p>Preview folders and ZIP files with the familiar experience of Finder.</p>\n</blockquote>\n<p>Purchase on the <a href=\"https://apps.apple.com/app/folder-preview/id6698876601\" rel=\"noopener noreferrer\">App Store</a>.</p>\n<p><a href=\"https://anybox.ltd/folder-preview\" rel=\"noopener noreferrer\"><img src=\"https://github.com/sindresorhus/quick-look-plugins/raw/main/screenshots/FolderPreview.png\" alt /></a></p>\n",
      "date_published": "2025-04-25T09:06:21.000Z",
      "date_modified": "2025-04-25T09:06:21.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/h4cc/awesome-elixir/",
      "title": "Awesome Elixir",
      "_slug": "h4cc/awesome-elixir/",
      "_filepath": "/content/h4cc/awesome-elixir/README.md",
      "url": "https://www.trackawesomelist.com/h4cc/awesome-elixir/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Hardware\n\n*   [elixir-circuits](https://github.com/elixir-circuits) - Elixir access to hardware I/O interfaces such as GPIO, I2C, and SPI (old version [elixir\\_ale (‚≠ê344)](https://github.com/fhunleth/elixir_ale)).",
      "content_html": "<h3><p>Hardware</p>\n</h3><ul>\n<li><a href=\"https://github.com/elixir-circuits\" rel=\"noopener noreferrer\">elixir-circuits</a> - Elixir access to hardware I/O interfaces such as GPIO, I2C, and SPI (old version <a href=\"https://github.com/fhunleth/elixir_ale\" rel=\"noopener noreferrer\">elixir_ale (‚≠ê344)</a>).</li>\n</ul>\n",
      "date_published": "2025-04-25T08:44:24.000Z",
      "date_modified": "2025-04-25T08:44:24.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/YuzheSHI/awesome-agi-cocosci/",
      "title": "Awesome Agi Cocosci",
      "_slug": "YuzheSHI/awesome-agi-cocosci/",
      "_filepath": "/content/YuzheSHI/awesome-agi-cocosci/README.md",
      "url": "https://www.trackawesomelist.com/YuzheSHI/awesome-agi-cocosci/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Domain Specific Language / Declarative DSL Applications\n\n*   [A high-level programming language for generative protein design](https://www.biorxiv.org/content/10.1101/2022.12.21.521526v1) - 2022. \\[[All Versions](https://scholar.google.com/scholar?cluster=11732741354610784314)]. Combining a basic set of building blocks into more complex forms is a universal design principle. Most protein designs have proceeded from a manual bottom-up approach using parts created by nature, but top-down design of proteins is fundamentally hard due to biological complexity. This work demonstrates how the modularity and programmability long sought for protein design can be realized through generative artificial intelligence. Advanced protein language models demonstrate emergent learning of atomic resolution structure and protein design principles. The authors leverage these developments to enable the programmable design of de novo protein sequences and structures of high complexity. First, the authors describe a high-level programming language based on modular building blocks that allows a designer to easily compose a set of desired properties. The authors then develop an energy-based generative model, built on atomic resolution structure prediction with a language model, that realizes all-atom structure designs that have the programmed properties. Designing a diverse set of specifications, including constraints on atomic coordinates, secondary structure, symmetry, and multimerization, demonstrates the generality and controllability of the approach. Enumerating constraints at increasing levels of hierarchical complexity shows that the approach can access a combinatorially large design space.",
      "content_html": "<h3><p>Domain Specific Language / Declarative DSL Applications</p>\n</h3><ul>\n<li><a href=\"https://www.biorxiv.org/content/10.1101/2022.12.21.521526v1\" rel=\"noopener noreferrer\">A high-level programming language for generative protein design</a> - 2022. [<a href=\"https://scholar.google.com/scholar?cluster=11732741354610784314\" rel=\"noopener noreferrer\">All Versions</a>]. Combining a basic set of building blocks into more complex forms is a universal design principle. Most protein designs have proceeded from a manual bottom-up approach using parts created by nature, but top-down design of proteins is fundamentally hard due to biological complexity. This work demonstrates how the modularity and programmability long sought for protein design can be realized through generative artificial intelligence. Advanced protein language models demonstrate emergent learning of atomic resolution structure and protein design principles. The authors leverage these developments to enable the programmable design of de novo protein sequences and structures of high complexity. First, the authors describe a high-level programming language based on modular building blocks that allows a designer to easily compose a set of desired properties. The authors then develop an energy-based generative model, built on atomic resolution structure prediction with a language model, that realizes all-atom structure designs that have the programmed properties. Designing a diverse set of specifications, including constraints on atomic coordinates, secondary structure, symmetry, and multimerization, demonstrates the generality and controllability of the approach. Enumerating constraints at increasing levels of hierarchical complexity shows that the approach can access a combinatorially large design space.</li>\n</ul>\n",
      "date_published": "2025-04-25T01:51:15.000Z",
      "date_modified": "2025-04-25T01:51:15.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/veggiemonk/awesome-docker/",
      "title": "Awesome Docker",
      "_slug": "veggiemonk/awesome-docker/",
      "_filepath": "/content/veggiemonk/awesome-docker/README.md",
      "url": "https://www.trackawesomelist.com/veggiemonk/awesome-docker/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Deployment and Infrastructure\n\n*   [awesome-stacks (‚≠ê1.1k)](https://github.com/ethibox/awesome-stacks) - Deploy 150+ open-source web apps with one Docker command",
      "content_html": "<h3><p>Deployment and Infrastructure</p>\n</h3><ul>\n<li><a href=\"https://github.com/ethibox/awesome-stacks\" rel=\"noopener noreferrer\">awesome-stacks (‚≠ê1.1k)</a> - Deploy 150+ open-source web apps with one Docker command</li>\n</ul>\n",
      "date_published": "2025-04-25T01:47:07.000Z",
      "date_modified": "2025-04-25T01:47:07.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/avelino/awesome-go/",
      "title": "Awesome Go",
      "_slug": "avelino/awesome-go/",
      "_filepath": "/content/avelino/awesome-go/README.md",
      "url": "https://www.trackawesomelist.com/avelino/awesome-go/",
      "summary": "2 awesome projects updated",
      "content_text": "\n\n### Database Tools\n\n*   [database-gateway (‚≠ê28)](https://github.com/kazhuravlev/database-gateway) - Running SQL in production with ACLs, logs, and shared links.\n\n### Utilities\n\n*   [healthcheck (‚≠ê19)](https://github.com/kazhuravlev/healthcheck) - A simple yet powerful readiness test for Kubernetes.\n*   [optional (‚≠ê10)](https://github.com/kazhuravlev/optional) - Optional struct fields and vars.",
      "content_html": "<h3><p>Database Tools</p>\n</h3><ul>\n<li><a href=\"https://github.com/kazhuravlev/database-gateway\" rel=\"noopener noreferrer\">database-gateway (‚≠ê28)</a> - Running SQL in production with ACLs, logs, and shared links.</li>\n</ul>\n<h3><p>Utilities</p>\n</h3><ul>\n<li><a href=\"https://github.com/kazhuravlev/healthcheck\" rel=\"noopener noreferrer\">healthcheck (‚≠ê19)</a> - A simple yet powerful readiness test for Kubernetes.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/kazhuravlev/optional\" rel=\"noopener noreferrer\">optional (‚≠ê10)</a> - Optional struct fields and vars.</li>\n</ul>\n",
      "date_published": "2025-04-25T01:35:06.000Z",
      "date_modified": "2025-04-25T01:35:32.000Z"
    }
  ]
}
