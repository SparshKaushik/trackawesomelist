{
  "version": "https://jsonfeed.org/version/1",
  "icon": "https://www.trackawesomelist.com/icon.png",
  "favicon": "https://www.trackawesomelist.com/favicon.ico",
  "language": "en",
  "title": "Awesome List Updates on Jun 06, 2025",
  "_site_title": "Track Awesome List",
  "description": "8 awesome lists updated today.",
  "_seo_title": "Awesome List Updates on Jun 06, 2025 - Track Awesome List",
  "feed_url": "https://www.trackawesomelist.com/feed.json",
  "home_page_url": "https://www.trackawesomelist.com",
  "items": [
    {
      "id": "https://www.trackawesomelist.com/kdeldycke/awesome-falsehood/",
      "title": "Awesome Falsehood",
      "_slug": "kdeldycke/awesome-falsehood/",
      "_filepath": "/content/kdeldycke/awesome-falsehood/README.md",
      "url": "https://www.trackawesomelist.com/kdeldycke/awesome-falsehood/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Software Engineering\n\n*   [Falsehoods about authorization](https://www.osohq.com/post/falsehoods-about-authorization) - Misconceptions about implementing permissions systems.",
      "content_html": "<h3><p>Software Engineering</p>\n</h3><ul>\n<li><a href=\"https://www.osohq.com/post/falsehoods-about-authorization\" rel=\"noopener noreferrer\">Falsehoods about authorization</a> - Misconceptions about implementing permissions systems.</li>\n</ul>\n",
      "date_published": "2025-06-06T16:25:22.000Z",
      "date_modified": "2025-06-06T16:25:22.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/kdeldycke/awesome-billing/",
      "title": "Awesome Billing",
      "_slug": "kdeldycke/awesome-billing/",
      "_filepath": "/content/kdeldycke/awesome-billing/README.md",
      "url": "https://www.trackawesomelist.com/kdeldycke/awesome-billing/",
      "summary": "6 awesome projects updated",
      "content_text": "\n\n### Pricing / Strategy\n\n*   [The Anatomy of SaaS Pricing Strategy](https://sbigrowth.com/hubfs/SBI_PI_AnatomyofSaaSPricingStrategy_Handbook.pdf) - Explain how to articulate the pricing of SaaS businesses around the product strategy.\n\n### Marketplace / Market Research\n\n*   [Vickrey auction](https://en.wikipedia.org/wiki/Vickrey_auction) - Hinted by an [HN comment](https://news.ycombinator.com/item?id=19145391), in which yes, “‘Asking people what they'd pay for and how much rarely works.’ (…) \\[but] using a Vickrey auction, similar to Google's ad auction mechanism, can elicit a person's maximum willingness-to-pay.”\n*   How to Kickstart and Scale a Marketplace Business: [Constrain the marketplace](https://www.lennysnewsletter.com/p/how-to-kickstart-and-scale-a-marketplace); Decide which side of the marketplace to concentrate on; Drive initial supply; Drive initial demand. A 4-parts series with dozen of interviews of people with direct experience building and scaling marketplaces.\n\n### Marketplace / Cloud Resources\n\n*   [Deconstructing Amazon EC2 Spot Instance Pricing](https://dants.github.io/papers/Spotprice11CloudCom.pdf) - “Cloud providers possessing large quantities of spare capacity must either incentivize clients to purchase it or suffer losses. Amazon is the first cloud provider to address this challenge, by allowing clients to bid on spare capacity and by granting resources to bidders while their bids exceed a periodically changing spot price.”\n\n### Contracts / Currencies\n\n*   [CUDs vs. Commit Contracts vs. SUDs in Google Cloud](https://66degrees.com/comparing-cuds-suds-and-commits-in-google-cloud/) - Explains the differences between various types of discounts and usage commitments in GCP.\n\n### Business Intelligence / Customer Lifetime Value\n\n*   [Churn Prediction](https://towardsdatascience.com/customer-churn-prediction-with-text-and-interpretability-bd3d57af34b1/) - “How to use Python in a simplistic way to fuel your company's growth by applying the predictive approach to all your actions.” Relies on XGBoost binary classification.\n\n### History / Cloud providers\n\n*   [£sd computing](https://en.wikipedia.org/wiki/%C2%A3sd#Computing) - The IBM 1401 mainframe (1959) optionally supported pounds/shillings/pence (£sd) currency arithmetics in hardware.",
      "content_html": "<h3><p>Pricing / Strategy</p>\n</h3><ul>\n<li><a href=\"https://sbigrowth.com/hubfs/SBI_PI_AnatomyofSaaSPricingStrategy_Handbook.pdf\" rel=\"noopener noreferrer\">The Anatomy of SaaS Pricing Strategy</a> - Explain how to articulate the pricing of SaaS businesses around the product strategy.</li>\n</ul>\n<h3><p>Marketplace / Market Research</p>\n</h3><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Vickrey_auction\" rel=\"noopener noreferrer\">Vickrey auction</a> - Hinted by an <a href=\"https://news.ycombinator.com/item?id=19145391\" rel=\"noopener noreferrer\">HN comment</a>, in which yes, “‘Asking people what they'd pay for and how much rarely works.’ (…) [but] using a Vickrey auction, similar to Google's ad auction mechanism, can elicit a person's maximum willingness-to-pay.”</li>\n</ul>\n<ul>\n<li>How to Kickstart and Scale a Marketplace Business: <a href=\"https://www.lennysnewsletter.com/p/how-to-kickstart-and-scale-a-marketplace\" rel=\"noopener noreferrer\">Constrain the marketplace</a>; Decide which side of the marketplace to concentrate on; Drive initial supply; Drive initial demand. A 4-parts series with dozen of interviews of people with direct experience building and scaling marketplaces.</li>\n</ul>\n<h3><p>Marketplace / Cloud Resources</p>\n</h3><ul>\n<li><a href=\"https://dants.github.io/papers/Spotprice11CloudCom.pdf\" rel=\"noopener noreferrer\">Deconstructing Amazon EC2 Spot Instance Pricing</a> - “Cloud providers possessing large quantities of spare capacity must either incentivize clients to purchase it or suffer losses. Amazon is the first cloud provider to address this challenge, by allowing clients to bid on spare capacity and by granting resources to bidders while their bids exceed a periodically changing spot price.”</li>\n</ul>\n<h3><p>Contracts / Currencies</p>\n</h3><ul>\n<li><a href=\"https://66degrees.com/comparing-cuds-suds-and-commits-in-google-cloud/\" rel=\"noopener noreferrer\">CUDs vs. Commit Contracts vs. SUDs in Google Cloud</a> - Explains the differences between various types of discounts and usage commitments in GCP.</li>\n</ul>\n<h3><p>Business Intelligence / Customer Lifetime Value</p>\n</h3><ul>\n<li><a href=\"https://towardsdatascience.com/customer-churn-prediction-with-text-and-interpretability-bd3d57af34b1/\" rel=\"noopener noreferrer\">Churn Prediction</a> - “How to use Python in a simplistic way to fuel your company's growth by applying the predictive approach to all your actions.” Relies on XGBoost binary classification.</li>\n</ul>\n<h3><p>History / Cloud providers</p>\n</h3><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/%C2%A3sd#Computing\" rel=\"noopener noreferrer\">£sd computing</a> - The IBM 1401 mainframe (1959) optionally supported pounds/shillings/pence (£sd) currency arithmetics in hardware.</li>\n</ul>\n",
      "date_published": "2025-06-06T15:15:11.000Z",
      "date_modified": "2025-06-06T15:40:40.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/ripienaar/free-for-dev/",
      "title": "Free for Dev",
      "_slug": "ripienaar/free-for-dev/",
      "_filepath": "/content/ripienaar/free-for-dev/README.md",
      "url": "https://www.trackawesomelist.com/ripienaar/free-for-dev/",
      "summary": "2 awesome projects updated",
      "content_text": "\n\n### Tools for Teams and Collaboration\n\n*   [Fibo](https://fibo.dev) - A free online realtime scrum poker tool for agile teams that lets unlimited members estimate story points for faster planning.\n\n### Messaging and Streaming\n\n*   [SuprSend](https://www.suprsend.com/) - SuprSend is a notification infrastructure that streamlines your product notifications with an API-first approach. Create and deliver transactional, crons, and engagement notifications on multiple channels with a single notification API. In free plan you get 10,000 notifications per month, including different workflow nodes such as digests, batches, multi-channels, preferences, tenants, broadcasts and more.",
      "content_html": "<h3><p>Tools for Teams and Collaboration</p>\n</h3><ul>\n<li><a href=\"https://fibo.dev\" rel=\"noopener noreferrer\">Fibo</a> - A free online realtime scrum poker tool for agile teams that lets unlimited members estimate story points for faster planning.</li>\n</ul>\n<h3><p>Messaging and Streaming</p>\n</h3><ul>\n<li><a href=\"https://www.suprsend.com/\" rel=\"noopener noreferrer\">SuprSend</a> - SuprSend is a notification infrastructure that streamlines your product notifications with an API-first approach. Create and deliver transactional, crons, and engagement notifications on multiple channels with a single notification API. In free plan you get 10,000 notifications per month, including different workflow nodes such as digests, batches, multi-channels, preferences, tenants, broadcasts and more.</li>\n</ul>\n",
      "date_published": "2025-06-06T14:45:06.000Z",
      "date_modified": "2025-06-06T15:12:20.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/CodyReichert/awesome-cl/",
      "title": "Awesome Cl",
      "_slug": "CodyReichert/awesome-cl/",
      "_filepath": "/content/CodyReichert/awesome-cl/README.md",
      "url": "https://www.trackawesomelist.com/CodyReichert/awesome-cl/",
      "summary": "6 awesome projects updated",
      "content_text": "\n\n### CSV\n\n*   ⭐ [cl-csv (⭐124)](https://github.com/AccelerationNet/cl-csv) - A library for parsing CSV files. [3-clause BSD](https://directory.fsf.org/wiki/License:BSD_3Clause).\n    *   [documentation (⭐124)](https://github.com/AccelerationNet/cl-csv/blob/master/DOCUMENTATION.md)\n    *   [example blog post](https://dev.to/vindarel/read-csv-files-in-common-lisp-cl-csv-data-table-3c9n).\n*   [cl-decimals (⭐21)](https://github.com/tlikonen/cl-decimals) - Decimal number parser and formatter. Public domain.\n*   [auto-text (⭐11)](https://github.com/defunkydrummer/auto-text) - automatic (encoding, end of line, column width, csv delimiter etc) detection for text files. [MIT](https://opensource.org/licenses/MIT). See also [inquisitor (⭐34)](https://github.com/t-sin/inquisitor) for detection of asian and far eastern languages.\n*   [csv-validator (⭐5)](https://github.com/KoenvdBerg/csv-validator) - Validates tabular CSV data using predefined validations, inspired from its Python homologue \"Great Expectations\". [BSD\\_3Clause](https://directory.fsf.org/wiki/License:BSD_3Clause).\n\n### JSON\n\n*   👍 [jzon (⭐167)](https://github.com/Zulu-Inuoe/jzon/) - a correct, safe and fast JSON parser. [MIT](https://opensource.org/licenses/MIT).\n    *   jzon is the only CL JSON library which correctly declines all invalid inputs per the official JSON test suite and accepts all valid inputs per that suite.\n    *   it doesn't crash on invalid input (jsown), doesn't choke on large datasets (Jonathan), and more.\n    *   v1.0 released in the Quicklisp dist of February, 2023.\n    *   \"I believe jzon to be the superior choice and hope for it to become the new, true de-facto library in the world of JSON-in-CL once and for all.\"\n*   [shasht (⭐55)](https://github.com/yitzchak/shasht) -  Common Lisp JSON reading and writing for the Kzinti. [MIT](https://directory.fsf.org/wiki/License:Expat).\n    *   \"Shasht is one of the two new libraries that I particularly like and is already in quicklisp. It is fast, it handles null correctly, it encodes CLOS objects, structures and hash-tables. It can also do incremental encoding.\" Sabra Crolleton.\n*   [cl-json (⭐13)](https://github.com/sharplispers/cl-json) - A highly customizable JSON encoder and decoder. [MIT](https://directory.fsf.org/wiki/License:Expat).\n    *   \"cl-json and yason are still the work horses if you need fine control, but speed is not their forte.\" @sabracrolleton\n*   [parcom/json (⭐65)](https://github.com/fosskers/parcom) - An extension to `parcom` for simple, fast, no-dependency JSON parsing.\n*   [NJSON (⭐21)](https://github.com/atlas-engineer/njson) - Parser-agnostic JSON indexing (with JSON Pointer support), destructuring, and validation framework. [BSD](https://directory.fsf.org/wiki/License:BSD_3Clause).\n*   [json-mop (⭐63)](https://github.com/gschjetne/json-mop) - A metaclass for bridging CLOS and JSON objects. [MIT](https://opensource.org/licenses/MIT).\n    *   depends on YASON\n    *   for JSON libraries that don't do it natively (jzon, shasht and cl-json are able to *encode* CLOS objects to JSON out of the box, and cl-json has the ability to *decode* JSON objects into a \"fluid-class\" CLOS object.)\n*   [cl-json-pointer (⭐13)](https://github.com/y2q-actionman/cl-json-pointer) - A JSON Pointer implementation. [MIT](https://opensource.org/licenses/MIT).\n*   [cl-jwk (⭐17)](https://github.com/dnaeon/cl-jwk) -  Common Lisp system for decoding public JSON Web Keys (JWK). BSD License.\n*   [JOSE (⭐35)](https://github.com/fukamachi/jose) - A JSON Object Signing and Encryption (JOSE) implementation for Common Lisp. BSD\\_2Clause.\n\n### TOML\n\n*   [parcom/toml (⭐65)](https://github.com/fosskers/parcom) - An extension to `parcom` for simple, no-dependency TOML parsing.\n*   [clop (⭐23)](https://github.com/sheepduke/clop) - A 1.0-compliant TOML parser.\n\n### XML\n\n*   [CXML](https://common-lisp.net/project/cxml/) - XML parser and serializer, with a range of extension libraries. [LLGPL](http://opensource.franz.com/preamble.html).\n    *   👍 has an incremental parser, allowing to parse big files.\n    *   see the [FXML (⭐33)](https://github.com/ruricolist/FXML) fork, with fixes and new features. You should use it if your are parsing potentially ill-formed or malicious XML, or if you need to use Klacks with namespaces.\n*   [parcom/xml (⭐65)](https://github.com/fosskers/parcom) - An extension to `parcom` for simple, fast XML parsing.\n*   [xpath (⭐10)](https://github.com/sharplispers/xpath) ([homepage](https://common-lisp.net/project/plexippus-xpath/atdoc/index.html) - Implementation of the XML Path Language (XPath) Version 1.0. [BSD\\_2Clause](https://directory.fsf.org/wiki/License:BSD_2Clause).\n*   [s-xml](http://cliki.net/S-XML) - A basic parser. [LLGPL](http://opensource.franz.com/preamble.html).\n*   [xmls (⭐20)](https://github.com/rpgoldman/xmls) - A small, simple, non-validating XML parser. [3-clause BSD](https://directory.fsf.org/wiki/License:BSD_3Clause).\n*   [cl-feedparser (⭐27)](https://github.com/TBRSS/cl-feedparser) - A Common Lisp (RSS, Atom) feed parser. [LLGPL](http://opensource.franz.com/preamble.html)\n*   [Buildnode (⭐19)](https://github.com/AccelerationNet/buildnode) - A common lisp library to ease interaction with CXML-dom, such as building Excel spreadsheets. [BSD](https://directory.fsf.org/wiki/License:BSD_3Clause).\n*   [lisp-xl (⭐31)](https://github.com/defunkydrummer/lisp-xl) -  Common Lisp Microsoft XLSX (Microsoft Excel) loader for arbitrarily-sized / big-size files. MIT.\n*   [xlsx](https://gitlab.common-lisp.net/cungil/xlsx) - a basic reader for Excel files.\n\n### YAML\n\n*   👍 [cl-yaml](https://github.com/eudoxia0/cl-yaml.git) - a YAML parser and emitter built on top of libyaml. [MIT](https://opensource.org/licenses/MIT).\n    *   an active fork: [cl-RemiYaml](https://nanako.mooo.com/fossil/cl-remiyaml/index) with a few fixes. Not a drop-in replacement.\n*   [nyaml (⭐28)](https://github.com/jasom/nyaml) - A lisp native YAML parser. MIT.\n*   [cl-yacclyaml (⭐15)](https://github.com/mabragor/cl-yaclyaml) - a pure lisp YAML processor (loader, but not yet dumper). [GPL3](http://www.gnu.org/copyleft/gpl.html).\n\n### Apps / Third-party APIs\n\n*   [parcom (⭐65)](https://github.com/fosskers/parcom) - Simple parser combinators for Common Lisp, in the style of Haskell’s `parsec` and Rust’s `nom`. [MPL-2.0](http://mozilla.org/MPL/2.0/).",
      "content_html": "<h3><p>CSV</p>\n</h3><ul>\n<li>⭐ <a href=\"https://github.com/AccelerationNet/cl-csv\" rel=\"noopener noreferrer\">cl-csv (⭐124)</a> - A library for parsing CSV files. <a href=\"https://directory.fsf.org/wiki/License:BSD_3Clause\" rel=\"noopener noreferrer\">3-clause BSD</a>.<ul>\n<li><a href=\"https://github.com/AccelerationNet/cl-csv/blob/master/DOCUMENTATION.md\" rel=\"noopener noreferrer\">documentation (⭐124)</a></li>\n<li><a href=\"https://dev.to/vindarel/read-csv-files-in-common-lisp-cl-csv-data-table-3c9n\" rel=\"noopener noreferrer\">example blog post</a>.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/tlikonen/cl-decimals\" rel=\"noopener noreferrer\">cl-decimals (⭐21)</a> - Decimal number parser and formatter. Public domain.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/defunkydrummer/auto-text\" rel=\"noopener noreferrer\">auto-text (⭐11)</a> - automatic (encoding, end of line, column width, csv delimiter etc) detection for text files. <a href=\"https://opensource.org/licenses/MIT\" rel=\"noopener noreferrer\">MIT</a>. See also <a href=\"https://github.com/t-sin/inquisitor\" rel=\"noopener noreferrer\">inquisitor (⭐34)</a> for detection of asian and far eastern languages.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/KoenvdBerg/csv-validator\" rel=\"noopener noreferrer\">csv-validator (⭐5)</a> - Validates tabular CSV data using predefined validations, inspired from its Python homologue \"Great Expectations\". <a href=\"https://directory.fsf.org/wiki/License:BSD_3Clause\" rel=\"noopener noreferrer\">BSD_3Clause</a>.</li>\n</ul>\n<h3><p>JSON</p>\n</h3><ul>\n<li>👍 <a href=\"https://github.com/Zulu-Inuoe/jzon/\" rel=\"noopener noreferrer\">jzon (⭐167)</a> - a correct, safe and fast JSON parser. <a href=\"https://opensource.org/licenses/MIT\" rel=\"noopener noreferrer\">MIT</a>.<ul>\n<li>jzon is the only CL JSON library which correctly declines all invalid inputs per the official JSON test suite and accepts all valid inputs per that suite.</li>\n<li>it doesn't crash on invalid input (jsown), doesn't choke on large datasets (Jonathan), and more.</li>\n<li>v1.0 released in the Quicklisp dist of February, 2023.</li>\n<li>\"I believe jzon to be the superior choice and hope for it to become the new, true de-facto library in the world of JSON-in-CL once and for all.\"</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/yitzchak/shasht\" rel=\"noopener noreferrer\">shasht (⭐55)</a> -  Common Lisp JSON reading and writing for the Kzinti. <a href=\"https://directory.fsf.org/wiki/License:Expat\" rel=\"noopener noreferrer\">MIT</a>.<ul>\n<li>\"Shasht is one of the two new libraries that I particularly like and is already in quicklisp. It is fast, it handles null correctly, it encodes CLOS objects, structures and hash-tables. It can also do incremental encoding.\" Sabra Crolleton.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/sharplispers/cl-json\" rel=\"noopener noreferrer\">cl-json (⭐13)</a> - A highly customizable JSON encoder and decoder. <a href=\"https://directory.fsf.org/wiki/License:Expat\" rel=\"noopener noreferrer\">MIT</a>.<ul>\n<li>\"cl-json and yason are still the work horses if you need fine control, but speed is not their forte.\" @sabracrolleton</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/fosskers/parcom\" rel=\"noopener noreferrer\">parcom/json (⭐65)</a> - An extension to <code>parcom</code> for simple, fast, no-dependency JSON parsing.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/atlas-engineer/njson\" rel=\"noopener noreferrer\">NJSON (⭐21)</a> - Parser-agnostic JSON indexing (with JSON Pointer support), destructuring, and validation framework. <a href=\"https://directory.fsf.org/wiki/License:BSD_3Clause\" rel=\"noopener noreferrer\">BSD</a>.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/gschjetne/json-mop\" rel=\"noopener noreferrer\">json-mop (⭐63)</a> - A metaclass for bridging CLOS and JSON objects. <a href=\"https://opensource.org/licenses/MIT\" rel=\"noopener noreferrer\">MIT</a>.<ul>\n<li>depends on YASON</li>\n<li>for JSON libraries that don't do it natively (jzon, shasht and cl-json are able to <em>encode</em> CLOS objects to JSON out of the box, and cl-json has the ability to <em>decode</em> JSON objects into a \"fluid-class\" CLOS object.)</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/y2q-actionman/cl-json-pointer\" rel=\"noopener noreferrer\">cl-json-pointer (⭐13)</a> - A JSON Pointer implementation. <a href=\"https://opensource.org/licenses/MIT\" rel=\"noopener noreferrer\">MIT</a>.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/dnaeon/cl-jwk\" rel=\"noopener noreferrer\">cl-jwk (⭐17)</a> -  Common Lisp system for decoding public JSON Web Keys (JWK). BSD License.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/fukamachi/jose\" rel=\"noopener noreferrer\">JOSE (⭐35)</a> - A JSON Object Signing and Encryption (JOSE) implementation for Common Lisp. BSD_2Clause.</li>\n</ul>\n<h3><p>TOML</p>\n</h3><ul>\n<li><a href=\"https://github.com/fosskers/parcom\" rel=\"noopener noreferrer\">parcom/toml (⭐65)</a> - An extension to <code>parcom</code> for simple, no-dependency TOML parsing.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/sheepduke/clop\" rel=\"noopener noreferrer\">clop (⭐23)</a> - A 1.0-compliant TOML parser.</li>\n</ul>\n<h3><p>XML</p>\n</h3><ul>\n<li><a href=\"https://common-lisp.net/project/cxml/\" rel=\"noopener noreferrer\">CXML</a> - XML parser and serializer, with a range of extension libraries. <a href=\"http://opensource.franz.com/preamble.html\" rel=\"noopener noreferrer\">LLGPL</a>.<ul>\n<li>👍 has an incremental parser, allowing to parse big files.</li>\n<li>see the <a href=\"https://github.com/ruricolist/FXML\" rel=\"noopener noreferrer\">FXML (⭐33)</a> fork, with fixes and new features. You should use it if your are parsing potentially ill-formed or malicious XML, or if you need to use Klacks with namespaces.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/fosskers/parcom\" rel=\"noopener noreferrer\">parcom/xml (⭐65)</a> - An extension to <code>parcom</code> for simple, fast XML parsing.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/sharplispers/xpath\" rel=\"noopener noreferrer\">xpath (⭐10)</a> (<a href=\"https://common-lisp.net/project/plexippus-xpath/atdoc/index.html\" rel=\"noopener noreferrer\">homepage</a> - Implementation of the XML Path Language (XPath) Version 1.0. <a href=\"https://directory.fsf.org/wiki/License:BSD_2Clause\" rel=\"noopener noreferrer\">BSD_2Clause</a>.</li>\n</ul>\n<ul>\n<li><a href=\"http://cliki.net/S-XML\" rel=\"noopener noreferrer\">s-xml</a> - A basic parser. <a href=\"http://opensource.franz.com/preamble.html\" rel=\"noopener noreferrer\">LLGPL</a>.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/rpgoldman/xmls\" rel=\"noopener noreferrer\">xmls (⭐20)</a> - A small, simple, non-validating XML parser. <a href=\"https://directory.fsf.org/wiki/License:BSD_3Clause\" rel=\"noopener noreferrer\">3-clause BSD</a>.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/TBRSS/cl-feedparser\" rel=\"noopener noreferrer\">cl-feedparser (⭐27)</a> - A Common Lisp (RSS, Atom) feed parser. <a href=\"http://opensource.franz.com/preamble.html\" rel=\"noopener noreferrer\">LLGPL</a></li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/AccelerationNet/buildnode\" rel=\"noopener noreferrer\">Buildnode (⭐19)</a> - A common lisp library to ease interaction with CXML-dom, such as building Excel spreadsheets. <a href=\"https://directory.fsf.org/wiki/License:BSD_3Clause\" rel=\"noopener noreferrer\">BSD</a>.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/defunkydrummer/lisp-xl\" rel=\"noopener noreferrer\">lisp-xl (⭐31)</a> -  Common Lisp Microsoft XLSX (Microsoft Excel) loader for arbitrarily-sized / big-size files. MIT.</li>\n</ul>\n<ul>\n<li><a href=\"https://gitlab.common-lisp.net/cungil/xlsx\" rel=\"noopener noreferrer\">xlsx</a> - a basic reader for Excel files.</li>\n</ul>\n<h3><p>YAML</p>\n</h3><ul>\n<li>👍 <a href=\"https://github.com/eudoxia0/cl-yaml.git\" rel=\"noopener noreferrer\">cl-yaml</a> - a YAML parser and emitter built on top of libyaml. <a href=\"https://opensource.org/licenses/MIT\" rel=\"noopener noreferrer\">MIT</a>.<ul>\n<li>an active fork: <a href=\"https://nanako.mooo.com/fossil/cl-remiyaml/index\" rel=\"noopener noreferrer\">cl-RemiYaml</a> with a few fixes. Not a drop-in replacement.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/jasom/nyaml\" rel=\"noopener noreferrer\">nyaml (⭐28)</a> - A lisp native YAML parser. MIT.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/mabragor/cl-yaclyaml\" rel=\"noopener noreferrer\">cl-yacclyaml (⭐15)</a> - a pure lisp YAML processor (loader, but not yet dumper). <a href=\"http://www.gnu.org/copyleft/gpl.html\" rel=\"noopener noreferrer\">GPL3</a>.</li>\n</ul>\n<h3><p>Apps / Third-party APIs</p>\n</h3><ul>\n<li><a href=\"https://github.com/fosskers/parcom\" rel=\"noopener noreferrer\">parcom (⭐65)</a> - Simple parser combinators for Common Lisp, in the style of Haskell’s <code>parsec</code> and Rust’s <code>nom</code>. <a href=\"http://mozilla.org/MPL/2.0/\" rel=\"noopener noreferrer\">MPL-2.0</a>.</li>\n</ul>\n",
      "date_published": "2025-06-06T13:20:30.000Z",
      "date_modified": "2025-06-06T13:20:30.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/playcanvas/awesome-playcanvas/",
      "title": "Awesome Playcanvas",
      "_slug": "playcanvas/awesome-playcanvas/",
      "_filepath": "/content/playcanvas/awesome-playcanvas/README.md",
      "url": "https://www.trackawesomelist.com/playcanvas/awesome-playcanvas/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### 3D Gaussian Splatting / YouTube Playables\n\n*   [4DV](https://www.4dv.ai/) - Impressive implementation of animated Gaussian splats (4DGS).\n*   [The Season](https://adnfamily.com/studio/mj/the_season/immersive/index.html) - Real estate visualization of a modern apartment block.",
      "content_html": "<h3><p>3D Gaussian Splatting / YouTube Playables</p>\n</h3><ul>\n<li><a href=\"https://www.4dv.ai/\" rel=\"noopener noreferrer\">4DV</a> - Impressive implementation of animated Gaussian splats (4DGS).</li>\n</ul>\n<ul>\n<li><a href=\"https://adnfamily.com/studio/mj/the_season/immersive/index.html\" rel=\"noopener noreferrer\">The Season</a> - Real estate visualization of a modern apartment block.</li>\n</ul>\n",
      "date_published": "2025-06-06T11:52:11.000Z",
      "date_modified": "2025-06-06T21:18:44.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/agamm/awesome-developer-first/",
      "title": "Awesome Developer First",
      "_slug": "agamm/awesome-developer-first/",
      "_filepath": "/content/agamm/awesome-developer-first/README.md",
      "url": "https://www.trackawesomelist.com/agamm/awesome-developer-first/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Monitoring\n\n*   [Maxim AI](https://www.getmaxim.ai) - End-to-end evaluation and observability platform, helping teams ship their AI agents reliably and 5x faster.",
      "content_html": "<h3><p>Monitoring</p>\n</h3><ul>\n<li><a href=\"https://www.getmaxim.ai\" rel=\"noopener noreferrer\">Maxim AI</a> - End-to-end evaluation and observability platform, helping teams ship their AI agents reliably and 5x faster.</li>\n</ul>\n",
      "date_published": "2025-06-06T09:01:20.000Z",
      "date_modified": "2025-06-06T09:01:20.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/YuzheSHI/awesome-agi-cocosci/",
      "title": "Awesome Agi Cocosci",
      "_slug": "YuzheSHI/awesome-agi-cocosci/",
      "_filepath": "/content/YuzheSHI/awesome-agi-cocosci/README.md",
      "url": "https://www.trackawesomelist.com/YuzheSHI/awesome-agi-cocosci/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Domain Specific Language / Design Practises\n\n*   [A Taxonomy of Domain-Specific Aspect Languages](https://dl.acm.org/doi/abs/10.1145/2685028) - ***ACM Computing Surveys***, 2015. \\[[All Versions](https://scholar.google.com/scholar?cluster=17254174131160041640)]. Domain-Specific Aspect Languages (DSALs) are Domain-Specific Languages (DSLs) designed to express crosscutting concerns. Compared to DSLs, their aspectual nature greatly amplifies the language design space. This survey structures this space in order to shed light on and compare the different domain-specific approaches to deal with crosscutting concerns. This survey reports on a corpus of 36 DSALs covering the space, discuss a set of design considerations, and provide a taxonomy of DSAL implementation approaches. This work serves as a frame of reference to DSAL and DSL researchers, enabling further advances in the field, and to developers as a guide for DSAL implementations.",
      "content_html": "<h3><p>Domain Specific Language / Design Practises</p>\n</h3><ul>\n<li><a href=\"https://dl.acm.org/doi/abs/10.1145/2685028\" rel=\"noopener noreferrer\">A Taxonomy of Domain-Specific Aspect Languages</a> - <em><strong>ACM Computing Surveys</strong></em>, 2015. [<a href=\"https://scholar.google.com/scholar?cluster=17254174131160041640\" rel=\"noopener noreferrer\">All Versions</a>]. Domain-Specific Aspect Languages (DSALs) are Domain-Specific Languages (DSLs) designed to express crosscutting concerns. Compared to DSLs, their aspectual nature greatly amplifies the language design space. This survey structures this space in order to shed light on and compare the different domain-specific approaches to deal with crosscutting concerns. This survey reports on a corpus of 36 DSALs covering the space, discuss a set of design considerations, and provide a taxonomy of DSAL implementation approaches. This work serves as a frame of reference to DSAL and DSL researchers, enabling further advances in the field, and to developers as a guide for DSAL implementations.</li>\n</ul>\n",
      "date_published": "2025-06-06T05:29:23.000Z",
      "date_modified": "2025-06-06T05:29:23.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/PatrickJS/awesome-angular/",
      "title": "Awesome Angular",
      "_slug": "PatrickJS/awesome-angular/",
      "_filepath": "/content/PatrickJS/awesome-angular/README.md",
      "url": "https://www.trackawesomelist.com/PatrickJS/awesome-angular/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### General / [Google Developer Experts](https://developers.google.com/experts/all/technology/web-technologies)\n\n*   [angular-template-signal-forms (⭐4)](https://github.com/chocosd/angular-template-signal-forms) - A modern Angular form library built from the ground up with Signals — flexible, type-safe, and fully themeable.",
      "content_html": "<h3><p>General / <a href=\"https://developers.google.com/experts/all/technology/web-technologies\" rel=\"noopener noreferrer\">Google Developer Experts</a></p>\n</h3><ul>\n<li><a href=\"https://github.com/chocosd/angular-template-signal-forms\" rel=\"noopener noreferrer\">angular-template-signal-forms (⭐4)</a> - A modern Angular form library built from the ground up with Signals — flexible, type-safe, and fully themeable.</li>\n</ul>\n",
      "date_published": "2025-06-06T04:00:30.000Z",
      "date_modified": "2025-06-06T04:00:30.000Z"
    }
  ]
}
