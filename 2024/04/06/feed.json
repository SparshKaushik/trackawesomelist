{
  "version": "https://jsonfeed.org/version/1",
  "icon": "https://www.trackawesomelist.com/icon.png",
  "favicon": "https://www.trackawesomelist.com/favicon.ico",
  "language": "en",
  "title": "Awesome List Updates on Apr 06, 2024",
  "_site_title": "Track Awesome List",
  "description": "8 awesome lists updated today.",
  "_seo_title": "Awesome List Updates on Apr 06, 2024 - Track Awesome List",
  "feed_url": "https://www.trackawesomelist.com/feed.json",
  "home_page_url": "https://www.trackawesomelist.com",
  "items": [
    {
      "id": "https://www.trackawesomelist.com/fffaraz/awesome-cpp/",
      "title": "Awesome Cpp",
      "_slug": "fffaraz/awesome-cpp/",
      "_filepath": "/content/fffaraz/awesome-cpp/README.md",
      "url": "https://www.trackawesomelist.com/fffaraz/awesome-cpp/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Debug\n\n*   [cpp-dump (⭐351)](https://github.com/philip82148/cpp-dump) - A C++ library for debugging purposes that can print any variable, even user-defined types. \\[MIT]",
      "content_html": "<h3><p>Debug</p>\n</h3><ul>\n<li><a href=\"https://github.com/philip82148/cpp-dump\" rel=\"noopener noreferrer\">cpp-dump (⭐351)</a> - A C++ library for debugging purposes that can print any variable, even user-defined types. [MIT]</li>\n</ul>\n",
      "date_published": "2024-04-06T16:41:51.000Z",
      "date_modified": "2024-04-06T16:41:51.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/unixorn/awesome-zsh-plugins/",
      "title": "Awesome Zsh Plugins",
      "_slug": "unixorn/awesome-zsh-plugins/",
      "_filepath": "/content/unixorn/awesome-zsh-plugins/README.md",
      "url": "https://www.trackawesomelist.com/unixorn/awesome-zsh-plugins/",
      "summary": "2 awesome projects updated",
      "content_text": "\n\n### Plugins / [superconsole](https://github.com/alexchmykhalo/superconsole) - Windows-only\n\n*   [touchplus (⭐3)](https://github.com/raisedadead/zsh-touchplus) - Create files with `touch` including the path.\n\n### Completions / [superconsole](https://github.com/alexchmykhalo/superconsole) - Windows-only\n\n*   [audogombleed.sh (⭐5)](https://github.com/i-love-coffee-i-love-tea/audogombleed.sh) - Makes it easy to generate completion files using a declarative syntax, quickly and without coding.",
      "content_html": "<h3><p>Plugins / <a href=\"https://github.com/alexchmykhalo/superconsole\" rel=\"noopener noreferrer\">superconsole</a> - Windows-only</p>\n</h3><ul>\n<li><a href=\"https://github.com/raisedadead/zsh-touchplus\" rel=\"noopener noreferrer\">touchplus (⭐3)</a> - Create files with <code>touch</code> including the path.</li>\n</ul>\n<h3><p>Completions / <a href=\"https://github.com/alexchmykhalo/superconsole\" rel=\"noopener noreferrer\">superconsole</a> - Windows-only</p>\n</h3><ul>\n<li><a href=\"https://github.com/i-love-coffee-i-love-tea/audogombleed.sh\" rel=\"noopener noreferrer\">audogombleed.sh (⭐5)</a> - Makes it easy to generate completion files using a declarative syntax, quickly and without coding.</li>\n</ul>\n",
      "date_published": "2024-04-06T16:40:47.000Z",
      "date_modified": "2024-04-06T16:44:50.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/dariubs/GoBooks/",
      "title": "GoBooks",
      "_slug": "dariubs/GoBooks/",
      "_filepath": "/content/dariubs/GoBooks/README.md",
      "url": "https://www.trackawesomelist.com/dariubs/GoBooks/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### 2024 - [Learning Go: An Idiomatic Approach to Real-World Go Programming, 2nd Edition](https://www.amazon.de/-/en/Jon-Bodner/dp/1098139291) / Why does this book look so different?\n\n*   Write idiomatic code in Go and design a Go project\n*   Understand the reasons behind Go's design decisions\n*   Set up a Go development environment for a solo developer or team\n*   Learn how and when to use reflection, unsafe, and cgo\n*   Discover how Go's features allow the language to run efficiently\n*   Know which Go features you should use sparingly or not at all\n*   Use Go's tools to improve performance, optimize memory usage, and reduce garbage collection\n*   Learn how to use Go's advanced development tools",
      "content_html": "<h3><p>2024 - <a href=\"https://www.amazon.de/-/en/Jon-Bodner/dp/1098139291\" rel=\"noopener noreferrer\">Learning Go: An Idiomatic Approach to Real-World Go Programming, 2nd Edition</a> / Why does this book look so different?</p>\n</h3><ul>\n<li>Write idiomatic code in Go and design a Go project</li>\n</ul>\n<ul>\n<li>Understand the reasons behind Go's design decisions</li>\n</ul>\n<ul>\n<li>Set up a Go development environment for a solo developer or team</li>\n</ul>\n<ul>\n<li>Learn how and when to use reflection, unsafe, and cgo</li>\n</ul>\n<ul>\n<li>Discover how Go's features allow the language to run efficiently</li>\n</ul>\n<ul>\n<li>Know which Go features you should use sparingly or not at all</li>\n</ul>\n<ul>\n<li>Use Go's tools to improve performance, optimize memory usage, and reduce garbage collection</li>\n</ul>\n<ul>\n<li>Learn how to use Go's advanced development tools</li>\n</ul>\n",
      "date_published": "2024-04-06T15:34:35.000Z",
      "date_modified": "2024-04-06T15:34:35.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/CodyReichert/awesome-cl/",
      "title": "Awesome Cl",
      "_slug": "CodyReichert/awesome-cl/",
      "_filepath": "/content/CodyReichert/awesome-cl/README.md",
      "url": "https://www.trackawesomelist.com/CodyReichert/awesome-cl/",
      "summary": "16 awesome projects updated",
      "content_text": "\n\n### Natural Language Processing\n\n*   [easy-audio (⭐23)](https://github.com/shamazmazum/easy-audio) - a collection of audio decoders and metadata readers.\n\n### Persistent object databases\n\n*   [bknr.datastore (⭐119)](https://github.com/hanshuebner/bknr-datastore) - a CLOS-based lisp-only database in RAM with transaction logging persistence. [Manual](https://www.common-lisp.net/project/bknr/html/documentation.html). [licence](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html).\n    *   see also this [good introductory blog post](https://ashok-khanna.medium.com/persistent-in-memory-data-storage-in-common-lisp-b-k-n-r-37f8ae76042f)\n    *   an example web application using bknr.datastore: [screenshotbot-oss (⭐282)](https://github.com/screenshotbot/screenshotbot-oss).\n    *   See also [bknr.cluster (⭐31)](https://github.com/tdrhq/bknr.cluster), if you want a highly-available replicated version of bknr.datastore.\n\n### YAML\n\n*   [nonempty (⭐3)](https://github.com/fosskers/cl-nonempty) -  Non-empty collections for Common Lisp.  [LGPL3](https://www.gnu.org/licenses/lgpl-3.0.en.html).\n\n### Python\n\n*   [py4cl (⭐242)](https://github.com/bendudson/py4cl) - A library that allows Common Lisp code to access Python libraries. It is basically the inverse of cl4py. [MIT](https://opensource.org/licenses/MIT).\n    *   its fork [py4cl2 (⭐50)](https://github.com/digikar99/py4cl2), at first less stable, now more developped and faster.\n    *   [py4cl2-cffi (⭐49)](https://github.com/digikar99/py4cl2-cffi) - CFFI based alternative to py4cl2.\n        *   \"When capable, the CFFI approach can be a 50 times faster than py4cl2.\"\n\n### Portability layers\n\n*   [dissect](https://shinmera.github.io/dissect) - when a lot of projects use the “trivial-backtrace” system that just gives them a string with a backtrace, Dissect allows you to capture, step, and completely inspect the stack trace on a variety of Lisp implementations. Also very useful for logging and other situations where execution is automatically continued, but the information of the current stack is still useful to store somewhere. [zlib](https://directory.fsf.org/wiki/License:Zlib).\n    *   [ndebug (⭐11)](https://github.com/atlas-engineer/ndebug) - Framework for portable GUI (or any non-standard) debuggers, based on [dissect](https://shinmera.github.io/dissect) and [trivial-custom-debugger (⭐14)](https://github.com/phoe/trivial-custom-debugger). [BSD](https://directory.fsf.org/wiki/License:BSD_3Clause).\n\n### Typing\n\n*   [algebraic-data-types (⭐140)](https://github.com/stylewarning/cl-algebraic-data-type) - defining algebraic data types in a similar spirit to Haskell or Standard ML, as well as for operating on them. [BSD\\_3Clause](https://directory.fsf.org/wiki/License:BSD_3Clause).\n\n### Community\n\n*   [trivial-system-loader (⭐12)](https://github.com/atgreen/trivial-system-loader) -  A system installation/loading abstraction for Common Lisp.\n    *   play nice with people using another library manager than Quicklisp: instead of hard-coding `(ql:quickload :mysystem)`, use `(tsl:load-system :mysystem)`. tsl:load-system will first try to use ocicl if available, then quicklisp, then plain asdf:load-system.\n\n### Interfaces to other package managers\n\n*   [cl-nix-lite (⭐40)](https://github.com/hraban/cl-nix-lite) -  Common Lisp module for Nix, without Quicklisp. [AGPL-3.0](https://directory.fsf.org/wiki/License:ArtisticLicense2.0)\n\n### Querying HTML/DOM, web scraping / Isomorphic web frameworks\n\n*   [scrapycl](https://40ants.com/scrapycl/) - web scraping framework for writing crawlers in Common Lisp. Unlicense.\n    *   relying on lquery.\n\n### Deployment / Isomorphic web frameworks\n\n*   [40ants/ci (⭐17)](https://github.com/40ants/ci/) -  Highly opionated Github Actions workflow builder for Common Lisp projects.\n    *   with: a linter, lisp critic, tests runner, test matrix, doc building, caching…\n\n### Others / Third-party APIs\n\n*   [linear-programming](https://neil-lindquist.github.io/linear-programming/) – a library for solving linear programming problems. [MIT](https://opensource.org/licenses/MIT).\n*   [shop3 (⭐154)](https://github.com/shop-planner/shop3) - a Hierarchical Task Network (HTN) AI planner. Mozilla Public License.\n\n### Utils / Third-party APIs\n\n*   [cl-gearman (⭐22)](https://github.com/taksatou/cl-gearman) - a library for the [Gearman (⭐748)](https://github.com/gearman/gearmand/) distributed job system. [LLGPL](http://opensource.franz.com/preamble.html).\n\n### Emacs / Third-party APIs\n\n*   [plain-common-lisp (⭐25)](https://github.com/pascalcombier/plain-common-lisp/) -  A trivial way to get a native Common Lisp environment on Windows.\n    *   ships SBCL, Quicklisp, Emacs and Slime.\n    *   with example programs for a console program, accessing the Win32 API, displaying a GUI with IUP, running an OpenGL window.\n*   [cl-devel2](https://hub.docker.com/r/eshamster/cl-devel2/) - a Docker container for Common Lisp development environment. Ships SBCL, CCL, Roswell and Emacs25 with Slime.\n\n### Apps / Third-party APIs\n\n*   [alexa (⭐62)](https://github.com/quil-lang/alexa) -  A Lexical Analyzer Generator. [BSD\\_3Clause](https://directory.fsf.org/wiki/License:BSD_3Clause).\n    *   ALEXA is a tool similar to lex or flex for generating lexical analyzers. Unlike tools like lex, however, ALEXA defines a domain-specific language within your Lisp program, so you don't need to invoke a separate tool.\n*   [texp (⭐5)](https://github.com/eugeneia/texp/) - A DSL to generate TeX. [AGPL-3.0](https://directory.fsf.org/wiki/License:AGPL-3.0).\n*   [CheckL (⭐46)](https://github.com/rpav/CheckL/) - Why write programs in Common Lisp but tests like Java? Meet CheckL!\n    *   a testing library that checks the current test value against the previous one and offers restarts.\n\n### Documentation builders / Third-party APIs\n\n*   [Codex (⭐93)](https://github.com/CommonDoc/codex) - A beautiful documentation system for Common Lisp. [MIT](https://opensource.org/licenses/MIT).\n\n### Plotting / Third-party APIs\n\n*   [cl-text-plot (⭐14)](https://github.com/moneylobster/cl-text-plot/) -  Plot with text in Common Lisp. No licence specified.",
      "content_html": "<h3><p>Natural Language Processing</p>\n</h3><ul>\n<li><a href=\"https://github.com/shamazmazum/easy-audio\" rel=\"noopener noreferrer\">easy-audio (⭐23)</a> - a collection of audio decoders and metadata readers.</li>\n</ul>\n<h3><p>Persistent object databases</p>\n</h3><ul>\n<li><a href=\"https://github.com/hanshuebner/bknr-datastore\" rel=\"noopener noreferrer\">bknr.datastore (⭐119)</a> - a CLOS-based lisp-only database in RAM with transaction logging persistence. <a href=\"https://www.common-lisp.net/project/bknr/html/documentation.html\" rel=\"noopener noreferrer\">Manual</a>. <a href=\"https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\" rel=\"noopener noreferrer\">licence</a>.<ul>\n<li>see also this <a href=\"https://ashok-khanna.medium.com/persistent-in-memory-data-storage-in-common-lisp-b-k-n-r-37f8ae76042f\" rel=\"noopener noreferrer\">good introductory blog post</a></li>\n<li>an example web application using bknr.datastore: <a href=\"https://github.com/screenshotbot/screenshotbot-oss\" rel=\"noopener noreferrer\">screenshotbot-oss (⭐282)</a>.</li>\n<li>See also <a href=\"https://github.com/tdrhq/bknr.cluster\" rel=\"noopener noreferrer\">bknr.cluster (⭐31)</a>, if you want a highly-available replicated version of bknr.datastore.</li>\n</ul>\n</li>\n</ul>\n<h3><p>YAML</p>\n</h3><ul>\n<li><a href=\"https://github.com/fosskers/cl-nonempty\" rel=\"noopener noreferrer\">nonempty (⭐3)</a> -  Non-empty collections for Common Lisp.  <a href=\"https://www.gnu.org/licenses/lgpl-3.0.en.html\" rel=\"noopener noreferrer\">LGPL3</a>.</li>\n</ul>\n<h3><p>Python</p>\n</h3><ul>\n<li><a href=\"https://github.com/bendudson/py4cl\" rel=\"noopener noreferrer\">py4cl (⭐242)</a> - A library that allows Common Lisp code to access Python libraries. It is basically the inverse of cl4py. <a href=\"https://opensource.org/licenses/MIT\" rel=\"noopener noreferrer\">MIT</a>.<ul>\n<li>its fork <a href=\"https://github.com/digikar99/py4cl2\" rel=\"noopener noreferrer\">py4cl2 (⭐50)</a>, at first less stable, now more developped and faster.</li>\n<li><a href=\"https://github.com/digikar99/py4cl2-cffi\" rel=\"noopener noreferrer\">py4cl2-cffi (⭐49)</a> - CFFI based alternative to py4cl2.<ul>\n<li>\"When capable, the CFFI approach can be a 50 times faster than py4cl2.\"</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3><p>Portability layers</p>\n</h3><ul>\n<li><a href=\"https://shinmera.github.io/dissect\" rel=\"noopener noreferrer\">dissect</a> - when a lot of projects use the “trivial-backtrace” system that just gives them a string with a backtrace, Dissect allows you to capture, step, and completely inspect the stack trace on a variety of Lisp implementations. Also very useful for logging and other situations where execution is automatically continued, but the information of the current stack is still useful to store somewhere. <a href=\"https://directory.fsf.org/wiki/License:Zlib\" rel=\"noopener noreferrer\">zlib</a>.<ul>\n<li><a href=\"https://github.com/atlas-engineer/ndebug\" rel=\"noopener noreferrer\">ndebug (⭐11)</a> - Framework for portable GUI (or any non-standard) debuggers, based on <a href=\"https://shinmera.github.io/dissect\" rel=\"noopener noreferrer\">dissect</a> and <a href=\"https://github.com/phoe/trivial-custom-debugger\" rel=\"noopener noreferrer\">trivial-custom-debugger (⭐14)</a>. <a href=\"https://directory.fsf.org/wiki/License:BSD_3Clause\" rel=\"noopener noreferrer\">BSD</a>.</li>\n</ul>\n</li>\n</ul>\n<h3><p>Typing</p>\n</h3><ul>\n<li><a href=\"https://github.com/stylewarning/cl-algebraic-data-type\" rel=\"noopener noreferrer\">algebraic-data-types (⭐140)</a> - defining algebraic data types in a similar spirit to Haskell or Standard ML, as well as for operating on them. <a href=\"https://directory.fsf.org/wiki/License:BSD_3Clause\" rel=\"noopener noreferrer\">BSD_3Clause</a>.</li>\n</ul>\n<h3><p>Community</p>\n</h3><ul>\n<li><a href=\"https://github.com/atgreen/trivial-system-loader\" rel=\"noopener noreferrer\">trivial-system-loader (⭐12)</a> -  A system installation/loading abstraction for Common Lisp.<ul>\n<li>play nice with people using another library manager than Quicklisp: instead of hard-coding <code>(ql:quickload :mysystem)</code>, use <code>(tsl:load-system :mysystem)</code>. tsl:load-system will first try to use ocicl if available, then quicklisp, then plain asdf:load-system.</li>\n</ul>\n</li>\n</ul>\n<h3><p>Interfaces to other package managers</p>\n</h3><ul>\n<li><a href=\"https://github.com/hraban/cl-nix-lite\" rel=\"noopener noreferrer\">cl-nix-lite (⭐40)</a> -  Common Lisp module for Nix, without Quicklisp. <a href=\"https://directory.fsf.org/wiki/License:ArtisticLicense2.0\" rel=\"noopener noreferrer\">AGPL-3.0</a></li>\n</ul>\n<h3><p>Querying HTML/DOM, web scraping / Isomorphic web frameworks</p>\n</h3><ul>\n<li><a href=\"https://40ants.com/scrapycl/\" rel=\"noopener noreferrer\">scrapycl</a> - web scraping framework for writing crawlers in Common Lisp. Unlicense.<ul>\n<li>relying on lquery.</li>\n</ul>\n</li>\n</ul>\n<h3><p>Deployment / Isomorphic web frameworks</p>\n</h3><ul>\n<li><a href=\"https://github.com/40ants/ci/\" rel=\"noopener noreferrer\">40ants/ci (⭐17)</a> -  Highly opionated Github Actions workflow builder for Common Lisp projects.<ul>\n<li>with: a linter, lisp critic, tests runner, test matrix, doc building, caching…</li>\n</ul>\n</li>\n</ul>\n<h3><p>Others / Third-party APIs</p>\n</h3><ul>\n<li><a href=\"https://neil-lindquist.github.io/linear-programming/\" rel=\"noopener noreferrer\">linear-programming</a> – a library for solving linear programming problems. <a href=\"https://opensource.org/licenses/MIT\" rel=\"noopener noreferrer\">MIT</a>.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/shop-planner/shop3\" rel=\"noopener noreferrer\">shop3 (⭐154)</a> - a Hierarchical Task Network (HTN) AI planner. Mozilla Public License.</li>\n</ul>\n<h3><p>Utils / Third-party APIs</p>\n</h3><ul>\n<li><a href=\"https://github.com/taksatou/cl-gearman\" rel=\"noopener noreferrer\">cl-gearman (⭐22)</a> - a library for the <a href=\"https://github.com/gearman/gearmand/\" rel=\"noopener noreferrer\">Gearman (⭐748)</a> distributed job system. <a href=\"http://opensource.franz.com/preamble.html\" rel=\"noopener noreferrer\">LLGPL</a>.</li>\n</ul>\n<h3><p>Emacs / Third-party APIs</p>\n</h3><ul>\n<li><a href=\"https://github.com/pascalcombier/plain-common-lisp/\" rel=\"noopener noreferrer\">plain-common-lisp (⭐25)</a> -  A trivial way to get a native Common Lisp environment on Windows.<ul>\n<li>ships SBCL, Quicklisp, Emacs and Slime.</li>\n<li>with example programs for a console program, accessing the Win32 API, displaying a GUI with IUP, running an OpenGL window.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://hub.docker.com/r/eshamster/cl-devel2/\" rel=\"noopener noreferrer\">cl-devel2</a> - a Docker container for Common Lisp development environment. Ships SBCL, CCL, Roswell and Emacs25 with Slime.</li>\n</ul>\n<h3><p>Apps / Third-party APIs</p>\n</h3><ul>\n<li><a href=\"https://github.com/quil-lang/alexa\" rel=\"noopener noreferrer\">alexa (⭐62)</a> -  A Lexical Analyzer Generator. <a href=\"https://directory.fsf.org/wiki/License:BSD_3Clause\" rel=\"noopener noreferrer\">BSD_3Clause</a>.<ul>\n<li>ALEXA is a tool similar to lex or flex for generating lexical analyzers. Unlike tools like lex, however, ALEXA defines a domain-specific language within your Lisp program, so you don't need to invoke a separate tool.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/eugeneia/texp/\" rel=\"noopener noreferrer\">texp (⭐5)</a> - A DSL to generate TeX. <a href=\"https://directory.fsf.org/wiki/License:AGPL-3.0\" rel=\"noopener noreferrer\">AGPL-3.0</a>.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/rpav/CheckL/\" rel=\"noopener noreferrer\">CheckL (⭐46)</a> - Why write programs in Common Lisp but tests like Java? Meet CheckL!<ul>\n<li>a testing library that checks the current test value against the previous one and offers restarts.</li>\n</ul>\n</li>\n</ul>\n<h3><p>Documentation builders / Third-party APIs</p>\n</h3><ul>\n<li><a href=\"https://github.com/CommonDoc/codex\" rel=\"noopener noreferrer\">Codex (⭐93)</a> - A beautiful documentation system for Common Lisp. <a href=\"https://opensource.org/licenses/MIT\" rel=\"noopener noreferrer\">MIT</a>.</li>\n</ul>\n<h3><p>Plotting / Third-party APIs</p>\n</h3><ul>\n<li><a href=\"https://github.com/moneylobster/cl-text-plot/\" rel=\"noopener noreferrer\">cl-text-plot (⭐14)</a> -  Plot with text in Common Lisp. No licence specified.</li>\n</ul>\n",
      "date_published": "2024-04-06T10:19:14.000Z",
      "date_modified": "2024-04-06T10:59:15.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/veggiemonk/awesome-docker/",
      "title": "Awesome Docker",
      "_slug": "veggiemonk/awesome-docker/",
      "_filepath": "/content/veggiemonk/awesome-docker/README.md",
      "url": "https://www.trackawesomelist.com/veggiemonk/awesome-docker/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Security / Other\n\n*   [Security Best Practices for Building Docker Images](https://linux-audit.com/tags/docker/)",
      "content_html": "<h3><p>Security / Other</p>\n</h3><ul>\n<li><a href=\"https://linux-audit.com/tags/docker/\" rel=\"noopener noreferrer\">Security Best Practices for Building Docker Images</a></li>\n</ul>\n",
      "date_published": "2024-04-06T08:32:06.000Z",
      "date_modified": "2024-04-06T08:32:06.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/rockerBOO/awesome-neovim/",
      "title": "Awesome Neovim",
      "_slug": "rockerBOO/awesome-neovim/",
      "_filepath": "/content/rockerBOO/awesome-neovim/README.md",
      "url": "https://www.trackawesomelist.com/rockerBOO/awesome-neovim/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Utility / Diagnostics\n\n*   [mistricky/codesnap.nvim (⭐808)](https://github.com/mistricky/codesnap.nvim) - Snapshot plugin with rich features that can make pretty code snapshots.",
      "content_html": "<h3><p>Utility / Diagnostics</p>\n</h3><ul>\n<li><a href=\"https://github.com/mistricky/codesnap.nvim\" rel=\"noopener noreferrer\">mistricky/codesnap.nvim (⭐808)</a> - Snapshot plugin with rich features that can make pretty code snapshots.</li>\n</ul>\n",
      "date_published": "2024-04-06T07:47:52.000Z",
      "date_modified": "2024-04-06T07:47:52.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/APA-Technology-Division/urban-and-regional-planning-resources/",
      "title": "Urban and Regional Planning Resources",
      "_slug": "APA-Technology-Division/urban-and-regional-planning-resources/",
      "_filepath": "/content/APA-Technology-Division/urban-and-regional-planning-resources/README.md",
      "url": "https://www.trackawesomelist.com/APA-Technology-Division/urban-and-regional-planning-resources/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Planning Coding Resources / Python\n\n*   [Madina (⭐197)](https://github.com/City-Form-Lab/madina) - Madina is a package of classes and functions to streamline the representation and analysis of urban networks. This library includes a python implementation of the Urban Network Analysis Tools.",
      "content_html": "<h3><p>Planning Coding Resources / Python</p>\n</h3><ul>\n<li><a href=\"https://github.com/City-Form-Lab/madina\" rel=\"noopener noreferrer\">Madina (⭐197)</a> - Madina is a package of classes and functions to streamline the representation and analysis of urban networks. This library includes a python implementation of the Urban Network Analysis Tools.</li>\n</ul>\n",
      "date_published": "2024-04-06T02:51:25.000Z",
      "date_modified": "2024-04-06T02:51:25.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/kyrolabs/awesome-langchain/",
      "title": "Awesome Langchain",
      "_slug": "kyrolabs/awesome-langchain/",
      "_filepath": "/content/kyrolabs/awesome-langchain/README.md",
      "url": "https://www.trackawesomelist.com/kyrolabs/awesome-langchain/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Other LLM Frameworks / Videos Playlists\n\n*   [LLocalSearch (⭐5.9k)](https://github.com/nilsherzig/LLocalSearch): LLocalSearch is a completely locally running search aggregator using LLM Agents. The user can ask a question and the system will use a chain of LLMs to find the answer. The user can see the progress of the agents and the final answer. No OpenAI or Google API keys are needed. ![GitHub Repo stars](https://img.shields.io/github/stars/nilsherzig/LLocalSearch?style=social)\n*   [Plandex (⭐14k)](https://github.com/plandex-ai/plandex): An AI coding engine for complex tasks ![GitHub Repo stars](https://img.shields.io/github/stars/plandex-ai/plandex?style=social)",
      "content_html": "<h3><p>Other LLM Frameworks / Videos Playlists</p>\n</h3><ul>\n<li><a href=\"https://github.com/nilsherzig/LLocalSearch\" rel=\"noopener noreferrer\">LLocalSearch (⭐5.9k)</a>: LLocalSearch is a completely locally running search aggregator using LLM Agents. The user can ask a question and the system will use a chain of LLMs to find the answer. The user can see the progress of the agents and the final answer. No OpenAI or Google API keys are needed. <img src=\"https://img.shields.io/github/stars/nilsherzig/LLocalSearch?style=social\" alt=\"GitHub Repo stars\" /></li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/plandex-ai/plandex\" rel=\"noopener noreferrer\">Plandex (⭐14k)</a>: An AI coding engine for complex tasks <img src=\"https://img.shields.io/github/stars/plandex-ai/plandex?style=social\" alt=\"GitHub Repo stars\" /></li>\n</ul>\n",
      "date_published": "2024-04-06T00:40:10.000Z",
      "date_modified": "2024-04-06T00:40:10.000Z"
    }
  ]
}
