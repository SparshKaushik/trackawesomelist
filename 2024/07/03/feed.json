{
  "version": "https://jsonfeed.org/version/1",
  "icon": "https://www.trackawesomelist.com/icon.png",
  "favicon": "https://www.trackawesomelist.com/favicon.ico",
  "language": "en",
  "title": "Awesome List Updates on Jul 03, 2024",
  "_site_title": "Track Awesome List",
  "description": "8 awesome lists updated today.",
  "_seo_title": "Awesome List Updates on Jul 03, 2024 - Track Awesome List",
  "feed_url": "https://www.trackawesomelist.com/feed.json",
  "home_page_url": "https://www.trackawesomelist.com",
  "items": [
    {
      "id": "https://www.trackawesomelist.com/catdevnull/awesome-zig/",
      "title": "Awesome Zig",
      "_slug": "catdevnull/awesome-zig/",
      "_filepath": "/content/catdevnull/awesome-zig/README.md",
      "url": "https://www.trackawesomelist.com/catdevnull/awesome-zig/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Misc libraries\n\n*   [attron/astroz (⭐21)](https://github.com/ATTron/astroz) - Astronomical and Spacecraft Toolkit.",
      "content_html": "<h3><p>Misc libraries</p>\n</h3><ul>\n<li><a href=\"https://github.com/ATTron/astroz\" rel=\"noopener noreferrer\">attron/astroz (⭐21)</a> - Astronomical and Spacecraft Toolkit.</li>\n</ul>\n",
      "date_published": "2024-07-03T12:58:59.000Z",
      "date_modified": "2024-07-03T12:58:59.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/AdrienTorris/awesome-blazor/",
      "title": "Awesome Blazor",
      "_slug": "AdrienTorris/awesome-blazor/",
      "_filepath": "/content/AdrienTorris/awesome-blazor/README.md",
      "url": "https://www.trackawesomelist.com/AdrienTorris/awesome-blazor/",
      "summary": "2 awesome projects updated",
      "content_text": "\n\n### Videos / Others\n\n*   [New Blazor Hybrid + .NET MAUI Templates are Incredible](https://www.youtube.com/watch?v=ilUohNPqnkU) -  ![duration](https://img.shields.io/badge/Duration:%20-10%20min-%230094FF?style=flat-square\\&cacheSeconds=maxAge\\&logo=youtube) June 28, 2024 - Looking to build mobile, desktop, and web apps all with nearly 100% shared web UI? New Blazor Hybrid templates in .NET 9 give you a single click automatically configured project with .NET MAUI, Blazor, and a razor class library all setup.\n\n### Podcasts / Others\n\n*   [MAUI and Blazor with Beth Massi](https://www.dotnetrocks.com/details/1903) - June 20, 2024 - What's up with MAUI and Blazor? Carl and Richard chat with Beth Massi about the latest MAUI, including the new webview available on GitHub that lets you embed an existing web page into your MAUI app. Beth talks about making apps the way you want to - with a mobile, web, or desktop focus - or making them all! Mixing Blazor and MAUI means you can steer clear of XAML if you prefer. There's no right way to build your clients, and MAUI gives you many choices. Duration: 45 minutes.",
      "content_html": "<h3><p>Videos / Others</p>\n</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=ilUohNPqnkU\" rel=\"noopener noreferrer\">New Blazor Hybrid + .NET MAUI Templates are Incredible</a> -  <img src=\"https://img.shields.io/badge/Duration:%20-10%20min-%230094FF?style=flat-square&amp;cacheSeconds=maxAge&amp;logo=youtube\" alt=\"duration\" /> June 28, 2024 - Looking to build mobile, desktop, and web apps all with nearly 100% shared web UI? New Blazor Hybrid templates in .NET 9 give you a single click automatically configured project with .NET MAUI, Blazor, and a razor class library all setup.</li>\n</ul>\n<h3><p>Podcasts / Others</p>\n</h3><ul>\n<li><a href=\"https://www.dotnetrocks.com/details/1903\" rel=\"noopener noreferrer\">MAUI and Blazor with Beth Massi</a> - June 20, 2024 - What's up with MAUI and Blazor? Carl and Richard chat with Beth Massi about the latest MAUI, including the new webview available on GitHub that lets you embed an existing web page into your MAUI app. Beth talks about making apps the way you want to - with a mobile, web, or desktop focus - or making them all! Mixing Blazor and MAUI means you can steer clear of XAML if you prefer. There's no right way to build your clients, and MAUI gives you many choices. Duration: 45 minutes.</li>\n</ul>\n",
      "date_published": "2024-07-03T12:06:46.000Z",
      "date_modified": "2024-07-03T12:06:46.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/filipecalegario/awesome-generative-deep-art/",
      "title": "Awesome Generative Deep Art",
      "_slug": "filipecalegario/awesome-generative-deep-art/",
      "_filepath": "/content/filipecalegario/awesome-generative-deep-art/README.md",
      "url": "https://www.trackawesomelist.com/filipecalegario/awesome-generative-deep-art/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Generative AI history, timelines, maps, and definitions\n\n*   [The AI Timeline (@TheAITimeline) / X](https://x.com/TheAITimeline)",
      "content_html": "<h3><p>Generative AI history, timelines, maps, and definitions</p>\n</h3><ul>\n<li><a href=\"https://x.com/TheAITimeline\" rel=\"noopener noreferrer\">The AI Timeline (@TheAITimeline) / X</a></li>\n</ul>\n",
      "date_published": "2024-07-03T11:21:53.000Z",
      "date_modified": "2024-07-03T11:21:53.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/vitejs/awesome-vite/",
      "title": "Awesome Vite",
      "_slug": "vitejs/awesome-vite/",
      "_filepath": "/content/vitejs/awesome-vite/README.md",
      "url": "https://www.trackawesomelist.com/vitejs/awesome-vite/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Templates / React\n\n*   [vite-biome-tailwind-template (⭐6)](https://github.com/not-first/vite-biome-tailwind-template) - React, Typescript, Biome, Tailwind CSS.",
      "content_html": "<h3><p>Templates / React</p>\n</h3><ul>\n<li><a href=\"https://github.com/not-first/vite-biome-tailwind-template\" rel=\"noopener noreferrer\">vite-biome-tailwind-template (⭐6)</a> - React, Typescript, Biome, Tailwind CSS.</li>\n</ul>\n",
      "date_published": "2024-07-03T10:22:20.000Z",
      "date_modified": "2024-07-03T10:22:20.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/rust-embedded/awesome-embedded-rust/",
      "title": "Awesome Embedded Rust",
      "_slug": "rust-embedded/awesome-embedded-rust/",
      "_filepath": "/content/rust-embedded/awesome-embedded-rust/README.md",
      "url": "https://www.trackawesomelist.com/rust-embedded/awesome-embedded-rust/",
      "summary": "7 awesome projects updated",
      "content_text": "\n\n### Books, blogs, and training materials / Free and public materials\n\n*   [The Embedded Rust Book](https://rust-embedded.github.io/book/) - An introductory book about using the Rust Programming Language on \"Bare Metal\" embedded systems, such as Microcontrollers.\n*   [The Rust on ESP Book](https://esp-rs.github.io/book/) - This book aims to provide a comprehensive guide on using the Rust programming language with Espressif SoCs and modules.\n*   [Embedded Rust (no\\_std) on Espressif](https://docs.esp-rs.org/no_std-training/) - Training for Rust using no\\_std approach development on ESP32-C3.\n*   [Embedded Rust (std) on Espressif](https://docs.esp-rs.org/std-training/) - Training for Rust using std approach development on ESP32-C3 by Ferrous Systems.\n*   [Discovery](https://rust-embedded.github.io/discovery) by @rust-embedded — this book is an introductory course on microcontroller-based embedded systems that uses Rust as the teaching language. Original author: @japaric\n*   [Cortex-M Quickstart](https://docs.rs/cortex-m-quickstart/0.3.1/cortex_m_quickstart/) by @japaric – a template and introduction to embedded Rust, suitable for developers familiar with embedded development but new to embedded Rust.\n*   [MicroRust](https://droogmic.github.io/microrust/) Introductory book for embedded development in Rust on the micro:bit.\n*   [Physical Computing With Rust](https://rahul-thakoor.github.io/physical-computing-rust/) A (WIP) guide to physical computing with Rust on the Raspberry Pi.\n*   [Writing an embedded OS in Rust on the Raspberry Pi (⭐14k)](https://github.com/rust-embedded/rust-raspi3-OS-tutorials) A set of tutorials that give a guided, step-by-step tour of how to write a monolithic Operating System kernel for an embedded system from scratch. Runs on the Raspberry Pi 3 and the Raspberry Pi 4.\n*   [Writing embedded drivers in Rust isn't that hard](https://hboeving.dev/blog/rust-2c-driver-p1/) A guide to building an embedded-hal driver. [Part 2](https://hboeving.dev/blog/rust-i2c-driver-p2/)\n*   [Ferrous Systems' Embedded Training Courses: 2020-current edition (⭐255)](https://github.com/ferrous-systems/embedded-trainings-2020) A hands-on training course for beginner and advanced learners of Embedded Rust, based on Nordic Semiconductor's nRF52840 hardware. This training was given at Oxidize Conferences and by [Ferrous Systems](https://ferrous-systems.com) to corporate customers.\n*   [Ferrous Systems' Knurling Sessions](https://knurling.ferrous-systems.com/sessions/) are hands-on embedded projects that explore specific concepts using generally available hardware, building full systems and components using microcontrollers, sensors, and actuators.\n*   [DSP on STM32F407G-DISC1 (⭐33)](https://github.com/jacobrosenthal/dsp-discoveryf4-rust/) Unofficial oxidization of the [Digital Signal Processing using Arm Cortex-M based Microcontrollers: Theory and Practice](https://www.amazon.com/Digital-Signal-Processing-Cortex-M-Microcontrollers/dp/1911531166) book. The book isn't necessary to enjoy the examples and learn a functional DSP Rust coding style.\n*   [Building a sailing starter board with Rust (RTIC)](https://gill.net.in/posts/stm32-pcb-sailing-and-rust/) A step-by-step story/guide to build STM32-based PCB and program it with Rust for fun and games.\n*   [STM32F4xx with Embedded Rust at the HAL](https://apollolabsblog.hashnode.dev/series/stm32f4-embedded-rust-hal) A blog containing a series of tutorials demonstrating the use of several peripherals through simple examples leveraging the stm32f4xx-hal crate.\n*   [Embedded Rust programming playlist](https://www.youtube.com/playlist?list=PLP_X41VhYn5X6Wwjnm0bRwI3n2pdaszxU) Various livestreams with Embedded Rust live coding\n*   [ESP32-C3 Rust Tutorials](https://youtube.com/playlist?list=PLkch9g9DEE0Lkm1LqcD7pZNDmXEczOo-a) Short videos and [Github project (⭐74)](https://github.com/shanemmattner/ESP32-C3_Rust_Tutorials) implementing various peripherals of the ESP32-C3 with the end goal of creating a complete data logger application.\n*   [Tweede golf's workshop](https://workshop.tweede.golf) - A full workshop about Rust and embedded Rust. The embedded parts use the nRF52840-DK and a LIS3DH breakout board. ([github source (⭐19)](https://github.com/tweedegolf/rust-workshop))\n\n### Books, blogs, and training materials / Paid and commercially available materials\n\n*   [Simplified Embedded Rust: Standard Library Edition](https://www.theembeddedrustacean.com/c/ser-std) - This book provides a quick path to start learning embedded Rust with minimal setup. Book is based on ESP devices and the Wokwi Simulator. This edition uses the standard library development approach which is based on the ESP-IDF framework.\n*   [Simplified Embedded Rust: Core Library Edition](https://www.theembeddedrustacean.com/c/ser-no-std) - This book provides a quick path to start learning embedded Rust with minimal setup. Book is based on ESP devices and the Wokwi Simulator. This edition uses the core library development approach for bare metal development.\n\n### Tools / Paid and commercially available materials\n\n*   [svd2rust (⭐782)](https://github.com/japaric/svd2rust) Generate Rust structs with register mappings from SVD files.\n*   [cortex-m semihosting (⭐0)](https://github.com/japaric/cortex-m-semihosting) Semihosting for ARM Cortex-M processors\n*   [bobbin-cli (⭐113)](https://github.com/bobbin-rs/bobbin-cli) A Rust command line tool to simplify embedded development and deployment.\n*   [ferros (⭐117)](https://github.com/auxoncorp/ferros) A Rust-based userland which also adds compile-time assurances to seL4 development.\n*   [cargo-bloat (⭐2.6k)](https://github.com/RazrFalcon/cargo-bloat) Find out what takes most of the space in your executable.\n*   [cargo-call-stack](https://crates.io/crates/cargo-call-stack) Static, whole program stack usage analyzer.\n*   [cargo-dfu](https://crates.io/crates/cargo-dfu) Cargo extension for flashing embedded rust programs via DFU.\n\n### Real-time / Real-time Operating System (RTOS)\n\n*   [Drone OS](https://drone-os.github.io) An Embedded Operating System for writing real-time applications in Rust.\n*   [FreeRTOS.rs (⭐239)](https://github.com/hashmismatch/freertos.rs) Rust interface for the FreeRTOS API\n*   [FreeRTOS-rust (⭐431)](https://github.com/lobaro/FreeRTOS-rust) Rust interface for FreeRTOS with Rust entry point and build support crate.\n*   [RIOT-OS](https://doc.riot-os.org/using-rust.html) directly supports applications written in Rust, both in terms of build system integration and by having safe and idiomatic wrappers.\n*   [Tock](https://www.tockos.org) An embedded operating system designed for running multiple concurrent, mutually distrustful applications on low-memory and low-power microcontrollers\n*   [Hubris (⭐3.2k)](https://github.com/oxidecomputer/hubris) A real-time operating system built by Oxide Computer to run the Service Controller processor in the mainboards of their rack-mount servers.\n\n### Peripheral Access Crates / Texas Instruments\n\n*   [`tm4c123x`](https://crates.io/crates/tm4c123x) Peripheral access API for TM4C123x microcontrollers (generated using svd2rust)\n*   [`tm4c129x`](https://crates.io/crates/tm4c129x) Peripheral access API for TM4C129x microcontrollers (generated using svd2rust)\n\n### Peripheral Access Crates / MSP430\n\n*   [`msp430fr2355`](https://crates.io/crates/msp430fr2355) Peripheral access API for MSP430FR2355 microcontrollers (generated using svd2rust)\n\n### Old books, blogs, and training materials / WIP\n\n*   [Exploring Rust on Teensy](https://branan.github.io/teensy/) by @branan — Beginner set of articles on getting into embedded dev in Rust.\n*   [Pragmatic Bare Metal Rust](http://www.hashmismatch.net/pragmatic-bare-metal-rust/) A starter article about starting Rust development on STM32 microcontrollers (cubeMX + FFI).\n*   [Using Rust in an Embedded Project: A Simple Example](https://spin.atomicobject.com/2016/07/08/rust-embedded-project-example/#.V3-os-6qlZw.hackernews) Article and some links on setting up Rust cross-compiling.\n*   [Robigalia](https://robigalia.org) general purpose robust operating system in Rust running on secure seL4 microkernel.\n*   [intermezzOS](http://intermezzos.github.io) A small teaching operating system in Rust. A book with some explanations is also included.\n*   [Fearless concurrency](http://blog.japaric.io/fearless-concurrency/) by @japaric — How to easily develop Rust programs for pretty much any ARM Cortex-M microcontroller with memory-safe concurrency.\n*   [Internet of Streams](https://www.youtube.com/playlist?list=PLX44HkctSkTewrL9frlUz0yeKLKecebT1) A video series  by [@jamesmunns](https://github.com/jamesmunns) building a bare metal IoT Sensor Node Platform from (nearly) scratch in Rust\n*   [Ferrous Systems' Embedded Training Courses: 2019 edition (⭐118)](https://github.com/ferrous-systems/embedded-trainings/) A hands-on training course for beginner and advanced learners of Embedded Rust, based on Nordic Semiconductor's nRF52 and Decawave's DWM1001-DEV hardware. This training was given at Oxidize Conferences and by Ferrous Systems to corporate customers.",
      "content_html": "<h3><p>Books, blogs, and training materials / Free and public materials</p>\n</h3><ul>\n<li><a href=\"https://rust-embedded.github.io/book/\" rel=\"noopener noreferrer\">The Embedded Rust Book</a> - An introductory book about using the Rust Programming Language on \"Bare Metal\" embedded systems, such as Microcontrollers.</li>\n</ul>\n<ul>\n<li><a href=\"https://esp-rs.github.io/book/\" rel=\"noopener noreferrer\">The Rust on ESP Book</a> - This book aims to provide a comprehensive guide on using the Rust programming language with Espressif SoCs and modules.</li>\n</ul>\n<ul>\n<li><a href=\"https://docs.esp-rs.org/no_std-training/\" rel=\"noopener noreferrer\">Embedded Rust (no_std) on Espressif</a> - Training for Rust using no_std approach development on ESP32-C3.</li>\n</ul>\n<ul>\n<li><a href=\"https://docs.esp-rs.org/std-training/\" rel=\"noopener noreferrer\">Embedded Rust (std) on Espressif</a> - Training for Rust using std approach development on ESP32-C3 by Ferrous Systems.</li>\n</ul>\n<ul>\n<li><a href=\"https://rust-embedded.github.io/discovery\" rel=\"noopener noreferrer\">Discovery</a> by @rust-embedded — this book is an introductory course on microcontroller-based embedded systems that uses Rust as the teaching language. Original author: @japaric</li>\n</ul>\n<ul>\n<li><a href=\"https://docs.rs/cortex-m-quickstart/0.3.1/cortex_m_quickstart/\" rel=\"noopener noreferrer\">Cortex-M Quickstart</a> by @japaric – a template and introduction to embedded Rust, suitable for developers familiar with embedded development but new to embedded Rust.</li>\n</ul>\n<ul>\n<li><a href=\"https://droogmic.github.io/microrust/\" rel=\"noopener noreferrer\">MicroRust</a> Introductory book for embedded development in Rust on the micro:bit.</li>\n</ul>\n<ul>\n<li><a href=\"https://rahul-thakoor.github.io/physical-computing-rust/\" rel=\"noopener noreferrer\">Physical Computing With Rust</a> A (WIP) guide to physical computing with Rust on the Raspberry Pi.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/rust-embedded/rust-raspi3-OS-tutorials\" rel=\"noopener noreferrer\">Writing an embedded OS in Rust on the Raspberry Pi (⭐14k)</a> A set of tutorials that give a guided, step-by-step tour of how to write a monolithic Operating System kernel for an embedded system from scratch. Runs on the Raspberry Pi 3 and the Raspberry Pi 4.</li>\n</ul>\n<ul>\n<li><a href=\"https://hboeving.dev/blog/rust-2c-driver-p1/\" rel=\"noopener noreferrer\">Writing embedded drivers in Rust isn't that hard</a> A guide to building an embedded-hal driver. <a href=\"https://hboeving.dev/blog/rust-i2c-driver-p2/\" rel=\"noopener noreferrer\">Part 2</a></li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/ferrous-systems/embedded-trainings-2020\" rel=\"noopener noreferrer\">Ferrous Systems' Embedded Training Courses: 2020-current edition (⭐255)</a> A hands-on training course for beginner and advanced learners of Embedded Rust, based on Nordic Semiconductor's nRF52840 hardware. This training was given at Oxidize Conferences and by <a href=\"https://ferrous-systems.com\" rel=\"noopener noreferrer\">Ferrous Systems</a> to corporate customers.</li>\n</ul>\n<ul>\n<li><a href=\"https://knurling.ferrous-systems.com/sessions/\" rel=\"noopener noreferrer\">Ferrous Systems' Knurling Sessions</a> are hands-on embedded projects that explore specific concepts using generally available hardware, building full systems and components using microcontrollers, sensors, and actuators.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/jacobrosenthal/dsp-discoveryf4-rust/\" rel=\"noopener noreferrer\">DSP on STM32F407G-DISC1 (⭐33)</a> Unofficial oxidization of the <a href=\"https://www.amazon.com/Digital-Signal-Processing-Cortex-M-Microcontrollers/dp/1911531166\" rel=\"noopener noreferrer\">Digital Signal Processing using Arm Cortex-M based Microcontrollers: Theory and Practice</a> book. The book isn't necessary to enjoy the examples and learn a functional DSP Rust coding style.</li>\n</ul>\n<ul>\n<li><a href=\"https://gill.net.in/posts/stm32-pcb-sailing-and-rust/\" rel=\"noopener noreferrer\">Building a sailing starter board with Rust (RTIC)</a> A step-by-step story/guide to build STM32-based PCB and program it with Rust for fun and games.</li>\n</ul>\n<ul>\n<li><a href=\"https://apollolabsblog.hashnode.dev/series/stm32f4-embedded-rust-hal\" rel=\"noopener noreferrer\">STM32F4xx with Embedded Rust at the HAL</a> A blog containing a series of tutorials demonstrating the use of several peripherals through simple examples leveraging the stm32f4xx-hal crate.</li>\n</ul>\n<ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PLP_X41VhYn5X6Wwjnm0bRwI3n2pdaszxU\" rel=\"noopener noreferrer\">Embedded Rust programming playlist</a> Various livestreams with Embedded Rust live coding</li>\n</ul>\n<ul>\n<li><a href=\"https://youtube.com/playlist?list=PLkch9g9DEE0Lkm1LqcD7pZNDmXEczOo-a\" rel=\"noopener noreferrer\">ESP32-C3 Rust Tutorials</a> Short videos and <a href=\"https://github.com/shanemmattner/ESP32-C3_Rust_Tutorials\" rel=\"noopener noreferrer\">Github project (⭐74)</a> implementing various peripherals of the ESP32-C3 with the end goal of creating a complete data logger application.</li>\n</ul>\n<ul>\n<li><a href=\"https://workshop.tweede.golf\" rel=\"noopener noreferrer\">Tweede golf's workshop</a> - A full workshop about Rust and embedded Rust. The embedded parts use the nRF52840-DK and a LIS3DH breakout board. (<a href=\"https://github.com/tweedegolf/rust-workshop\" rel=\"noopener noreferrer\">github source (⭐19)</a>)</li>\n</ul>\n<h3><p>Books, blogs, and training materials / Paid and commercially available materials</p>\n</h3><ul>\n<li><a href=\"https://www.theembeddedrustacean.com/c/ser-std\" rel=\"noopener noreferrer\">Simplified Embedded Rust: Standard Library Edition</a> - This book provides a quick path to start learning embedded Rust with minimal setup. Book is based on ESP devices and the Wokwi Simulator. This edition uses the standard library development approach which is based on the ESP-IDF framework.</li>\n</ul>\n<ul>\n<li><a href=\"https://www.theembeddedrustacean.com/c/ser-no-std\" rel=\"noopener noreferrer\">Simplified Embedded Rust: Core Library Edition</a> - This book provides a quick path to start learning embedded Rust with minimal setup. Book is based on ESP devices and the Wokwi Simulator. This edition uses the core library development approach for bare metal development.</li>\n</ul>\n<h3><p>Tools / Paid and commercially available materials</p>\n</h3><ul>\n<li><a href=\"https://github.com/japaric/svd2rust\" rel=\"noopener noreferrer\">svd2rust (⭐782)</a> Generate Rust structs with register mappings from SVD files.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/japaric/cortex-m-semihosting\" rel=\"noopener noreferrer\">cortex-m semihosting (⭐0)</a> Semihosting for ARM Cortex-M processors</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/bobbin-rs/bobbin-cli\" rel=\"noopener noreferrer\">bobbin-cli (⭐113)</a> A Rust command line tool to simplify embedded development and deployment.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/auxoncorp/ferros\" rel=\"noopener noreferrer\">ferros (⭐117)</a> A Rust-based userland which also adds compile-time assurances to seL4 development.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/RazrFalcon/cargo-bloat\" rel=\"noopener noreferrer\">cargo-bloat (⭐2.6k)</a> Find out what takes most of the space in your executable.</li>\n</ul>\n<ul>\n<li><a href=\"https://crates.io/crates/cargo-call-stack\" rel=\"noopener noreferrer\">cargo-call-stack</a> Static, whole program stack usage analyzer.</li>\n</ul>\n<ul>\n<li><a href=\"https://crates.io/crates/cargo-dfu\" rel=\"noopener noreferrer\">cargo-dfu</a> Cargo extension for flashing embedded rust programs via DFU.</li>\n</ul>\n<h3><p>Real-time / Real-time Operating System (RTOS)</p>\n</h3><ul>\n<li><a href=\"https://drone-os.github.io\" rel=\"noopener noreferrer\">Drone OS</a> An Embedded Operating System for writing real-time applications in Rust.</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/hashmismatch/freertos.rs\" rel=\"noopener noreferrer\">FreeRTOS.rs (⭐239)</a> Rust interface for the FreeRTOS API</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/lobaro/FreeRTOS-rust\" rel=\"noopener noreferrer\">FreeRTOS-rust (⭐431)</a> Rust interface for FreeRTOS with Rust entry point and build support crate.</li>\n</ul>\n<ul>\n<li><a href=\"https://doc.riot-os.org/using-rust.html\" rel=\"noopener noreferrer\">RIOT-OS</a> directly supports applications written in Rust, both in terms of build system integration and by having safe and idiomatic wrappers.</li>\n</ul>\n<ul>\n<li><a href=\"https://www.tockos.org\" rel=\"noopener noreferrer\">Tock</a> An embedded operating system designed for running multiple concurrent, mutually distrustful applications on low-memory and low-power microcontrollers</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/oxidecomputer/hubris\" rel=\"noopener noreferrer\">Hubris (⭐3.2k)</a> A real-time operating system built by Oxide Computer to run the Service Controller processor in the mainboards of their rack-mount servers.</li>\n</ul>\n<h3><p>Peripheral Access Crates / Texas Instruments</p>\n</h3><ul>\n<li><a href=\"https://crates.io/crates/tm4c123x\" rel=\"noopener noreferrer\"><code>tm4c123x</code></a> Peripheral access API for TM4C123x microcontrollers (generated using svd2rust)</li>\n</ul>\n<ul>\n<li><a href=\"https://crates.io/crates/tm4c129x\" rel=\"noopener noreferrer\"><code>tm4c129x</code></a> Peripheral access API for TM4C129x microcontrollers (generated using svd2rust)</li>\n</ul>\n<h3><p>Peripheral Access Crates / MSP430</p>\n</h3><ul>\n<li><a href=\"https://crates.io/crates/msp430fr2355\" rel=\"noopener noreferrer\"><code>msp430fr2355</code></a> Peripheral access API for MSP430FR2355 microcontrollers (generated using svd2rust)</li>\n</ul>\n<h3><p>Old books, blogs, and training materials / WIP</p>\n</h3><ul>\n<li><a href=\"https://branan.github.io/teensy/\" rel=\"noopener noreferrer\">Exploring Rust on Teensy</a> by @branan — Beginner set of articles on getting into embedded dev in Rust.</li>\n</ul>\n<ul>\n<li><a href=\"http://www.hashmismatch.net/pragmatic-bare-metal-rust/\" rel=\"noopener noreferrer\">Pragmatic Bare Metal Rust</a> A starter article about starting Rust development on STM32 microcontrollers (cubeMX + FFI).</li>\n</ul>\n<ul>\n<li><a href=\"https://spin.atomicobject.com/2016/07/08/rust-embedded-project-example/#.V3-os-6qlZw.hackernews\" rel=\"noopener noreferrer\">Using Rust in an Embedded Project: A Simple Example</a> Article and some links on setting up Rust cross-compiling.</li>\n</ul>\n<ul>\n<li><a href=\"https://robigalia.org\" rel=\"noopener noreferrer\">Robigalia</a> general purpose robust operating system in Rust running on secure seL4 microkernel.</li>\n</ul>\n<ul>\n<li><a href=\"http://intermezzos.github.io\" rel=\"noopener noreferrer\">intermezzOS</a> A small teaching operating system in Rust. A book with some explanations is also included.</li>\n</ul>\n<ul>\n<li><a href=\"http://blog.japaric.io/fearless-concurrency/\" rel=\"noopener noreferrer\">Fearless concurrency</a> by @japaric — How to easily develop Rust programs for pretty much any ARM Cortex-M microcontroller with memory-safe concurrency.</li>\n</ul>\n<ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PLX44HkctSkTewrL9frlUz0yeKLKecebT1\" rel=\"noopener noreferrer\">Internet of Streams</a> A video series  by <a href=\"https://github.com/jamesmunns\" rel=\"noopener noreferrer\">@jamesmunns</a> building a bare metal IoT Sensor Node Platform from (nearly) scratch in Rust</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/ferrous-systems/embedded-trainings/\" rel=\"noopener noreferrer\">Ferrous Systems' Embedded Training Courses: 2019 edition (⭐118)</a> A hands-on training course for beginner and advanced learners of Embedded Rust, based on Nordic Semiconductor's nRF52 and Decawave's DWM1001-DEV hardware. This training was given at Oxidize Conferences and by Ferrous Systems to corporate customers.</li>\n</ul>\n",
      "date_published": "2024-07-03T07:30:54.000Z",
      "date_modified": "2024-07-03T07:32:48.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/beardicus/awesome-plotters/",
      "title": "Awesome Plotters",
      "_slug": "beardicus/awesome-plotters/",
      "_filepath": "/content/beardicus/awesome-plotters/README.md",
      "url": "https://www.trackawesomelist.com/beardicus/awesome-plotters/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Software / Vector Creation\n\n*   [PINTR](https://javier.xyz/pintr) - Plottable random line drawings from your images.",
      "content_html": "<h3><p>Software / Vector Creation</p>\n</h3><ul>\n<li><a href=\"https://javier.xyz/pintr\" rel=\"noopener noreferrer\">PINTR</a> - Plottable random line drawings from your images.</li>\n</ul>\n",
      "date_published": "2024-07-03T02:57:33.000Z",
      "date_modified": "2024-07-03T02:57:33.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/jaywcjlove/awesome-mac/",
      "title": "Awesome Mac",
      "_slug": "jaywcjlove/awesome-mac/",
      "_filepath": "/content/jaywcjlove/awesome-mac/README.md",
      "url": "https://www.trackawesomelist.com/jaywcjlove/awesome-mac/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Audio and Video Tools / Audio Record and Process\n\n*   [Quick Recorder](https://lihaoyun6.github.io/quickrecorder/) - A lightweight and high-performance screen recorder for macOS [![Open-Source Software](https://jaywcjlove.github.io/sb/ico/min-oss.svg \"Open Source Software\")](https://github.com/lihaoyun6/QuickRecorder) ![Freeware](https://jaywcjlove.github.io/sb/ico/min-free.svg \"Freeware\")",
      "content_html": "<h3><p>Audio and Video Tools / Audio Record and Process</p>\n</h3><ul>\n<li><a href=\"https://lihaoyun6.github.io/quickrecorder/\" rel=\"noopener noreferrer\">Quick Recorder</a> - A lightweight and high-performance screen recorder for macOS <a href=\"https://github.com/lihaoyun6/QuickRecorder\" rel=\"noopener noreferrer\"><img src=\"https://jaywcjlove.github.io/sb/ico/min-oss.svg\" alt=\"Open-Source Software\" /></a> <img src=\"https://jaywcjlove.github.io/sb/ico/min-free.svg\" alt=\"Freeware\" /></li>\n</ul>\n",
      "date_published": "2024-07-03T02:24:42.000Z",
      "date_modified": "2024-07-03T02:24:42.000Z"
    },
    {
      "id": "https://www.trackawesomelist.com/YuzheSHI/awesome-agi-cocosci/",
      "title": "Awesome Agi Cocosci",
      "_slug": "YuzheSHI/awesome-agi-cocosci/",
      "_filepath": "/content/YuzheSHI/awesome-agi-cocosci/README.md",
      "url": "https://www.trackawesomelist.com/YuzheSHI/awesome-agi-cocosci/",
      "summary": "1 awesome projects updated",
      "content_text": "\n\n### Commonsense / AI Commonsense Reasoning\n\n*   [The Abduction of Sherlock Holmes: A Dataset for Visual Abductive Reasoning](https://link.springer.com/chapter/10.1007/978-3-031-20059-5_32) - ***ECCV'22***, 2022. \\[[All Versions](https://scholar.google.com/scholar?cluster=18355807581692234364)]. \\[[Preprint](https://arxiv.org/abs/2202.04800)]. This paper presents Sherlock, an annotated corpus of 103K images for testing machine capacity for abductive reasoning beyond literal image contents. The corpus construction process adopts a free-viewing paradigm: participants first observe and identify salient clues within images (e.g., objects, actions) and then provide a plausible inference about the scene, given the clue.",
      "content_html": "<h3><p>Commonsense / AI Commonsense Reasoning</p>\n</h3><ul>\n<li><a href=\"https://link.springer.com/chapter/10.1007/978-3-031-20059-5_32\" rel=\"noopener noreferrer\">The Abduction of Sherlock Holmes: A Dataset for Visual Abductive Reasoning</a> - <em><strong>ECCV'22</strong></em>, 2022. [<a href=\"https://scholar.google.com/scholar?cluster=18355807581692234364\" rel=\"noopener noreferrer\">All Versions</a>]. [<a href=\"https://arxiv.org/abs/2202.04800\" rel=\"noopener noreferrer\">Preprint</a>]. This paper presents Sherlock, an annotated corpus of 103K images for testing machine capacity for abductive reasoning beyond literal image contents. The corpus construction process adopts a free-viewing paradigm: participants first observe and identify salient clues within images (e.g., objects, actions) and then provide a plausible inference about the scene, given the clue.</li>\n</ul>\n",
      "date_published": "2024-07-03T00:05:36.000Z",
      "date_modified": "2024-07-03T00:05:36.000Z"
    }
  ]
}
